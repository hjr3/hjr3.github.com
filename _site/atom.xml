<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Tom Preston-Werner</title>
 <link href="http://hermanradtke.com.com/atom.xml" rel="self"/>
 <link href="http://hermanradtke.com/"/>
 <updated>2013-06-26T07:52:10+00:00</updated>
 <id>http://hermanradtke.com/</id>
 <author>
   <name>Herman J. Radtke III</name>
   <email>hermanradtke@gmail.com</email>
 </author>

 
 <entry>
   <title>DRY and Clean Interfaces</title>
   <link href="http://hermanradtke.com/2013/03/16/dry-and-clean-interfaces.html"/>
   <updated>2013-03-16T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2013/03/16/dry-and-clean-interfaces</id>
   <content type="html">&lt;h1 id='dry_and_clean_interfaces'&gt;DRY and Clean Interfaces&lt;/h1&gt;

&lt;p&gt;The principle of Don&amp;#8217;t Repeat Yourself (DRY) is more than just grouping common code together. When trying to apply the DRY principle, it is easy to start making a mess of a class interface. I recently had to write some code to generate Flickr image URLs from an API response. I needed to generate two types of URLs: a thumbnail and a normal image. Here is one version of code reuse:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objective-c'&gt;&lt;span class='k'&gt;-&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nf'&gt;generateFlickrImageUrl:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSDictionary&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nv'&gt;photo&lt;/span&gt; &lt;span class='nf'&gt;withImageType:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;imageType&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;imageSize&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='n'&gt;imageType&lt;/span&gt; &lt;span class='n'&gt;isEqualToString&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;thumbnail&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='n'&gt;imageSize&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s'&gt;@&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='n'&gt;imageSize&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s'&gt;@&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;

    &lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;farm&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;photo&lt;/span&gt; &lt;span class='n'&gt;valueForKey&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;farm&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;server&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;photo&lt;/span&gt; &lt;span class='n'&gt;valueForKey&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;server&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;photoId&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;photo&lt;/span&gt; &lt;span class='n'&gt;valueForKey&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;secret&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;photo&lt;/span&gt; &lt;span class='n'&gt;valueForKey&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;secret&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;url&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='n'&gt;stringWithFormat&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;http://farm%@.staticflickr.com/%@/%@_%@_%@.jpg&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;farm&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;server&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;photoId&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;secret&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;imageSize&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;url&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this does reuse code, it is bad because the code is not accepting of change. If I have to add some other sort of image type, then I have to modify this function. This is a big red flag. When you start using method parameters as an extension of your interface, you may be making the code hard to change. Also, anyone using this class will have to look for the list of available options for the &lt;code&gt;imageType&lt;/code&gt; parameter. I think it is better to design a easy to understand interface instead.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objective-c'&gt;&lt;span class='k'&gt;-&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nf'&gt;generateFlickrImageUrl:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSDictionary&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nv'&gt;photo&lt;/span&gt; &lt;span class='nf'&gt;withImageSize:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;imageSize&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;farm&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;photo&lt;/span&gt; &lt;span class='n'&gt;valueForKey&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;farm&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;server&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;photo&lt;/span&gt; &lt;span class='n'&gt;valueForKey&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;server&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;photoId&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;photo&lt;/span&gt; &lt;span class='n'&gt;valueForKey&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;secret&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;photo&lt;/span&gt; &lt;span class='n'&gt;valueForKey&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;secret&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;url&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='n'&gt;stringWithFormat&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;http://farm%@.staticflickr.com/%@/%@_%@_%@.jpg&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;farm&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;server&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;photoId&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;secret&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;imageSize&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;url&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='n'&gt;generateImageUrlThumbnail&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSDictionary&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='n'&gt;photo&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;generateFlickrImageUrl&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='n'&gt;photo&lt;/span&gt; &lt;span class='n'&gt;withImageSize&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='n'&gt;generateImageUrl&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSDictionary&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='n'&gt;photo&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;generateFlickrImageUrl&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='n'&gt;photo&lt;/span&gt; &lt;span class='n'&gt;withImageSize&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;generateFlickrImageUrl&lt;/code&gt; is now a protected method of the class while the &lt;code&gt;generateImageUrl&lt;/code&gt; and &lt;code&gt;generateImageUrlThumbnail&lt;/code&gt; methods define the public interface.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Misunderstanding DRY</title>
   <link href="http://hermanradtke.com/2013/02/06/misunderstanding-dry.html"/>
   <updated>2013-02-06T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2013/02/06/misunderstanding-dry</id>
   <content type="html">&lt;p&gt;I think the Object Oriented (OO) principle of Don&amp;#8217;t Repeat Yourself (DRY) is often misunderstood. In particular, the word &amp;#8220;repeat&amp;#8221; is troublesome. It has nothing to do with minimizing the amount of code you write. It is also not about merging similar methods together into a super-method. The DRY principle is about preserving a single source of truth in a system. When a there are multiple sources of truth in a system we have to write more code to manually keep all the truths in sync with each other. This often leads to unintended consequences to a part of the system when a change is made to a different part of the system. We are left to look through the code looking for these unintended consequences and become increasingly reluctant to change. Properly applying the DRY principle protects us from these unintended consequences and can make our code much more accepting of change.&lt;/p&gt;

&lt;p&gt;To those less experienced, DRYing up some parts of the code may not seem like a waste of time in the present. I want to use some code samples in an attempt to prove that fixing even simple DRY violations can be very helpful. The following class is a simple &lt;code&gt;Car&lt;/code&gt; class. It starts out with a single method &lt;code&gt;currentSpeed()&lt;/code&gt; which returns the current speed of the &lt;code&gt;Car&lt;/code&gt; instance. In a real class, there would be more implementation detail. For now we are just concerned with the speed of the &lt;code&gt;Car&lt;/code&gt; class. We will change the &lt;code&gt;Car&lt;/code&gt; and use the DRY principles to help us design good code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Car
{
    protected $speed;

    public function currentSpeed() { return $this-&amp;gt;speed; }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point the class seems pretty reasonable. The &lt;code&gt;$speed&lt;/code&gt; member variable stores the speed of the &lt;code&gt;Car&lt;/code&gt; instance. The &lt;code&gt;currentSpeed()&lt;/code&gt; method simply returns the speed. Now let us pretend that we need to add the logic for cruise control. A basic cruise control system is made up of four operations: toggle, set, cancel and resume. The toggle operation turns the cruise control on and off. The set operation will determine the speed of the &lt;code&gt;Car&lt;/code&gt; object and maintain that speed. The cancel operation instructs the cruise control system to stop maintaining the set speed. The resume operation signals the cruise control system to accelerate to the set speed and then maintain that speed. The toggle operation is uninteresting, so let&amp;#8217;s start implementing the set operation. We might do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Car
{
    protected $speed;
    protected $cruisingSpeed;

    public function currentSpeed() { return $this-&amp;gt;speed; }

    public function cruiseControlSet() {
        $this-&amp;gt;cruisingSpeed = $this-&amp;gt;speed;
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a simple change, but we actually just violated the DRY principle. The &lt;code&gt;cruiseControlSet()&lt;/code&gt; method should not have direct access to the &lt;code&gt;$speed&lt;/code&gt; member variable. Good OO design focuses on passing around message (or methods) and not data. The &lt;code&gt;$speed&lt;/code&gt; member variable is data. We should use the &lt;code&gt;currentSpeed()&lt;/code&gt; method to &lt;em&gt;ask&lt;/em&gt; for the speed. I made a special point to use the word &lt;em&gt;ask&lt;/em&gt; in the previous sentence. Our current implementation is not asking for anything. It knows &lt;em&gt;how&lt;/em&gt; the &lt;code&gt;$speed&lt;/code&gt; data is stored within &lt;code&gt;Car&lt;/code&gt; class. What is the big deal though, right? It is obvious by looking at this code that two different methods are accessing &lt;code&gt;$speed&lt;/code&gt;. If we are going to change how &lt;code&gt;$speed&lt;/code&gt; works later on, we can deal with it then. YAGNI bro!&lt;/p&gt;

&lt;p&gt;Trying to predict the future is sure way to make your code design overly complex. The principle of You Aren&amp;#8217;t Gonna Need It (YAGNI) addresses this concern. However, we have already established a pattern here. More than one method needs to know the speed of the &lt;code&gt;Car&lt;/code&gt; object. There is a good chance that more methods will need to know the speed as well. It is also important to consider the cost of making a change. In this case, the cost of changing &lt;code&gt;cruiseControlSet()&lt;/code&gt; to use the &lt;code&gt;currentSpeed()&lt;/code&gt; method instead of directly accessing &lt;code&gt;$speed&lt;/code&gt; is very low. When the cost is low, err on the side of good OO design in an attempt to make change easy. Do it even if you are sure that &lt;code&gt;$speed&lt;/code&gt; will never change.&lt;/p&gt;

&lt;p&gt;Something else starts to become apparent as we add more of the cruise control functionality to the &lt;code&gt;Car&lt;/code&gt; class. Let&amp;#8217;s add the other methods and see if we can spot it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Car
{
    protected $speed;
    protected $cruisingSpeed;

    public function currentSpeed() { return $this-&amp;gt;speed; }
    public function cruisingSpeed() { return $this-&amp;gt;cruisingSpeed; }

    public function cruiseControlToggle() { ... }

    public function cruiseControlSet() {
        $this-&amp;gt;cruisingSpeed = $this-&amp;gt;currentSpeed();
    }

    public function cruiseControlCancel() { ... }

    public function cruiseControlResume() {
        if ($this-&amp;gt;currentSpeed() != $this-&amp;gt;cruisingSpeed()) {
            ...
        }
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we are adding the cruise control functionality to the &lt;code&gt;Car&lt;/code&gt; class something starts to feel wrong. The class is getting large in a hurry. Also, our tests may be getting harder to setup. This functionality is screaming to be refactored into a separate class. Another hint is that we started using a common method prefix of &lt;code&gt;cruiseControl&lt;/code&gt;. Whenever this happens, we should really consider if this functionality is part of this class. Let&amp;#8217;s move all the &lt;code&gt;cruiseControl*()&lt;/code&gt; methods and the &lt;code&gt;cruisingSpeed()&lt;/code&gt; method into another class. Watch closely how the DRY principle helps us minimize the amount of changes we make in this refactor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Car
{
    protected $speed;
    protected $cruisingSpeed;

    public function currentSpeed() { return $this-&amp;gt;speed; }
}

class CruiseControl 
{
    public function cruisingSpeed() { return $this-&amp;gt;cruisingSpeed; }

    public function toggle() { ... }

    public function set() {
        $this-&amp;gt;cruisingSpeed = $this-&amp;gt;currentSpeed();
    }

    public function cancel() { ... }

    public function resume() {
        if ($this-&amp;gt;currentSpeed() != $this-&amp;gt;cruisingSpeed()) {
            ...
        }
    }

    public function __construct(Car $car)
    {
        $this-&amp;gt;car = $car;
    }

    protected function currentSpeed()
    {
        return $this-&amp;gt;car-&amp;gt;currentSpeed();
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how the methods that implement our cruise control operations are still using the &lt;code&gt;currentSpeed()&lt;/code&gt; method. They did not have to change because we just added a protected method to get the current speed of the car. We hide away the knowledge of where the speed is coming from as these methods are not concerned with that specific knowledge. We are able to do this because the cruise control is given access to the public interface of the &lt;code&gt;Car&lt;/code&gt; class and can then determine the speed. This forces the cruise control system to &lt;em&gt;ask&lt;/em&gt; the &lt;code&gt;Car&lt;/code&gt; class to do things. For example, the cruise control system no longer has the potential to change the &lt;code&gt;$speed&lt;/code&gt; of the &lt;code&gt;Car&lt;/code&gt; class. If it wants to change speeds, it must &lt;em&gt;ask&lt;/em&gt; a &lt;code&gt;Car&lt;/code&gt; object to accelerate or decelerate.&lt;/p&gt;

&lt;p&gt;I hope I have shown the benefits of DRYing up code, even when the DRY violations appear to be harmless. You may still have some reservations about the benefits of the DRY principle. I encourage you to put the those reservations aside for a period of time and adhere to those principles. Chances are you will notice an increase in the quality of design.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>What do MySQL datetime types and scrum have in common?</title>
   <link href="http://hermanradtke.com/2013/01/19/datetime-scrum.html"/>
   <updated>2013-01-19T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2013/01/19/datetime-scrum</id>
   <content type="html">&lt;h1 id='what_do_mysql_datetime_types_and_scrum_have_in_common'&gt;What do MySQL datetime types and scrum have in common?&lt;/h1&gt;

&lt;p&gt;I have always wondered why the MySQL datetime type only has second precision. Developers will happily put a datetime type in a unique index though. They justify that decision by telling themselves, &amp;#8220;Two rows inserted within the same second will never happen&amp;#8221;. That same developer just got done reading the latest MongoDB article that benchmarked a gazillion inserts a second. They tweeted it too. I suggest that we use a bigint and store a timestamp with greater precision if we are to use it as a unique index (or use Postgres). &amp;#8220;A bigint takes up too much space!&amp;#8221;. Cool guid there, bro. So what does this tangent have to do with scrum? This whole notion of 2-4 week sprints for development is akin to using second precision when a &lt;a href='http://www.fusionio.com/data-sheets/iodrive2-duo/'&gt;Fusion ioDrive2&lt;/a&gt; can rock 500 million write IOPS.&lt;/p&gt;

&lt;p&gt;I just have this notion in my head that 2-4 week sprints are not condusive to good business. I may be wrong, but &lt;a href='http://blog.expensify.com/2013/01/11/ceo-friday-startup-best-practices-95-failure-rate/'&gt;95% of startups fail&lt;/a&gt; anyways so you might as well try something different. I prefer 1-2 day iterations. It may sound crazy to break a 4 month project down into 1-2 day iterations, but I think the end result will be significantly better. It distills a project or feature down to what is most important. With 2 week iterations, going through 4 iterations of a product takes 2 months. That feels like a lifetime to me. The quarter is nearly over by then. I hope your (educated) guess was right because you have almost no time to try something else. I am not even confining this 1-2 day iteration idea to startups either. I think it is more important for larger businesses because they have more to gain (and lose).&lt;/p&gt;

&lt;p&gt;I expect this 1-2 day pace to feel chaotic to most people. Most people want to establish some kind of process so they feel like they have some control. A 2-4 week sprint is great because we now have time to estimate. With estimates we now have visibility into the healthiness of the project through burndown charts and can measure things like team velocity. When did &amp;#8220;team velocity&amp;#8221; suddenly become more important than growing the business? They would rather sit up in the ivory tower and watch Uncle Bob discuss the best practice for the number of lines of a class method instead.&lt;/p&gt;

&lt;p&gt;Grow the business. And stop using MySQL datetime fields in unique indices.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Do Not Be Afraid Of New Technology</title>
   <link href="http://hermanradtke.com/2012/12/30/do-not-be-afraid-of-new-technology.html"/>
   <updated>2012-12-30T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2012/12/30/do-not-be-afraid-of-new-technology</id>
   <content type="html">&lt;h1 id='do_not_be_afraid_of_new_technology'&gt;Do Not Be Afraid Of New Technology&lt;/h1&gt;

&lt;p&gt;I think the &lt;a href='http://lucumr.pocoo.org/2012/12/29/sql-is-agile/'&gt;SQL is Agile&lt;/a&gt; post by Armin Ronacher is a little short sighted. &lt;em&gt;Disclaimer: I rarely use MongoDB or other NoSQL offerings&lt;/em&gt;. There are plenty of good reasons to use MongoDB in production. Many people and companies have shown it to be successful. More importantly we should not be afraid of trying out new things, especially for side projects. We should be cautious of trying new things for important projects. By &amp;#8220;important&amp;#8221;, I mean those projects that need to be reliable or where there is some sort of SLA. This important distinction between types of projects is not made in the article. If we are building some toy application or program, then I see no problem considering MongoDB. For those 1-2% of toy projects that take off and need to scale big, you will have some growing pains with MongoDB. However, you will always have growing pains. Even with SQL there will be growing pains. There are always new ideas coming out about how we can use relational databases to scale. At one point there was no such thing as the idea of sharding or master/slave replication. These ideas came about as SQL became more mature. There may be another breakthrough that no one has thought of to scale relational databases. There also may be some breakthroughs with NoSQL datbases that make them scale better than they do now.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://en.wikipedia.org/wiki/Relational_database'&gt;Relational databases&lt;/a&gt; have been around since the 1970s and Oracle was started in 1977. There has been a ton of research poured into relational databases. We have the SQL-99 standard and ACID compliance. There are a lot of people using relational databases and they have become very familiar with them over the years. MongoDB was just started a little over &lt;a href='http://en.wikipedia.org/wiki/MongoDB#History'&gt;5 years ago&lt;/a&gt;. Not as many people have as much knowledge or expierence with MongoDB as they do with something like MySQL because it has not been around as long. To say that you will &amp;#8220;never&amp;#8221; use it again for a project moving forward is the wrong attitude. If you do not feel comfortable with MongoDB, then you should not use it for any sort of serious project. That should not prevent you from using it for toy projects so you can build more experience. Let&amp;#8217;s face it: document databases have a place in the world and they are not going to go away.&lt;/p&gt;

&lt;p&gt;I think a lot of the problems Armin has with NoSQL, such as adding a new index, will go away. The fact that indices are hard to add or can change the output is a problem that can be solved. That is not a problem inherit with document databases. That is just a pain point of the implementation. The global lock in MongoDB was a huge pain point and it eventually went away. Maybe saying that you &amp;#8220;would never start a project with MongoDB&amp;#8221; is just sensationalism. I believe NoSQL can be used for toy projects if you think the technology is interesting but are not ready to use it on something more serious. That is a great way we can be responsible with approaching new technology.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>PHP: The Good Parts</title>
   <link href="http://hermanradtke.com/2012/07/16/php-the-good-parts.html"/>
   <updated>2012-07-16T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2012/07/16/php-the-good-parts</id>
   <content type="html">This blog post is inspired by Douglas Crockford's book &lt;a href=&quot;http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742&quot;&gt;JavaScript: The Good Parts&lt;/a&gt;.

All programming languages have warts. That is, there were certain decisions made about a language that are less than ideal. Some people are driven to remove these warts from the language in an attempt to make the language better. I think this is done with the best intentions, but can often have negative consequences. JavaScript is a good example of a language that has a lot of warts. Despite all these warts, JavaScript is a very useful language and has seen a huge rise in popularity. I feel PHP is the same way. It has bad parts, but there are so many good parts that we need to celebrate those good parts. Here are a few things off the top of my head:
&lt;h2&gt;Arrays&lt;/h2&gt;
I think the array is the single most powerful and useful part of PHP. The PHP array is the Swiss Amry knife in my programming toolkit. I have written applications in a number of other software languages and I have yet to find anything else more useful. The best part about arrays is that they just work. I don't have to decide ahead of time between a list or a map. The PHP array is to data structures as NoSQL is to SQL. Better still is that PHP core uses them all over the place. Results from the database: arrays. Parsing a json POST from the client: arrays. They are ubiquitous in PHP in both core and userland. I cannot say enough good things about PHP arrays.
&lt;h2&gt;Web Ready&lt;/h2&gt;
PHP is web ready. I do not mean that PHP is easy to integrate into a webserver. PHP is easy to integrate, but I think a lot of languages do a good job of integrating to webservers now. I mean PHP is built for the web. It is so easy to create an HTML template and pass the data to it. I think Mustache and Twig are great. That being said, I do not have to decide on a templating language in order to get up and running. Everyone understands HTML.

I do think this is feature is getting less important as the web develops. I write a lot of API's and send almost everything to the client via json. However, they are still tons of websites out there are that are not platforms and need to serve up HTML.
&lt;h2&gt;Streams&lt;/h2&gt;
Streams are the best kept secret in PHP. Most people do not even realize they are using streams when they are interacting with file systems or networks. I wrote a &lt;a href=&quot;https://gist.github.com/1706840&quot;&gt;plugin to push messages&lt;/a&gt; to the Phergie IRC bot in less than an hour using streams. They are a really powerful abstraction that is used all over PHP.
&lt;h2&gt;Type Juggling&lt;/h2&gt;
For the most part, a web application is just a bunch of strings. HTTP is all strings, most database adapters return strings and all output is strings. PHP handles all of this and removes all kinds of boilerplate code from my applications. I think PHP has the most sensible implementation of juggling too. Yes, they are some problems with large integers that are represented as strings. It is by no means perfect. However, I think the PHP zval has saved me orders of magnitude more hours than pain.

For all the warts, there is plenty of beauty in PHP. I still enjoy writing web applications using PHP and focus my time using the parts of PHP that work really well.
</content>
 </entry>
 
 <entry>
   <title>Managing Gearman With Gearadmin Tool</title>
   <link href="http://hermanradtke.com/2012/04/23/managing-gearman-with-gearadmin-tool.html"/>
   <updated>2012-04-23T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2012/04/23/managing-gearman-with-gearadmin-tool</id>
   <content type="html">The more jobs flowing through Gearman, the more likely something will happen. Queues can get backed up, workers can crash and performance can degrade. It is important to monitor the status of the Gearman ecosystem and be proactive about fixing problems. We can do this using the &lt;em&gt;gearadmin&lt;/em&gt; tool.&lt;!--more--&gt;The &lt;em&gt;gearadmin&lt;/em&gt; program is a relatively new program that makes administration of Gearman easier. Before the release of gearman 0.19 the only way to query the gearman daemon was to use telnet. You still can use telnet and reference the Administrative Protocol section &lt;a href=&quot;http://gearman.org/?id=protocol&quot;&gt;http://gearman.org/?id=protocol&lt;/a&gt; for a list of commands. While telnet is a still an option, the &lt;em&gt;gearadmin&lt;/em&gt; tool saves a lot of boilerplate scripts from being written. The &lt;em&gt;gearadmin&lt;/em&gt; tool is really nothing more than a wrapper around the telnet commands. It does make capturing the output a little easier and you don't have to memorize the commands.

I wish the &lt;em&gt;gearadmin&lt;/em&gt; output was a little nicer to read. The raw dump of the telnet output leaves the data a little cryptic.
</content>
 </entry>
 
 <entry>
   <title>Evaluate multidimensional arrays using vim xdebug</title>
   <link href="http://hermanradtke.com/2012/03/27/evaluate-multidimensional-arrays-using-vim-xdebug.html"/>
   <updated>2012-03-27T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2012/03/27/evaluate-multidimensional-arrays-using-vim-xdebug</id>
   <content type="html">I love vim. I love XDebug. I need it to evaluate multidimensional (or nested) arrays though and it does not seem to do that. Chris Hartjes tweeted about his frustration with arrays too and I decided to fix the problem. Turns out there is nothing to fix.

Turns out we need to tweak a default configuration settings to get this all to work. Open up your .vimrc and add the following line:

&lt;code&gt; let g:debuggerMaxDepth = 3
&lt;/code&gt;

That depth means you will be able to view the contents of a triply-nested array. That seemed like a sensible default to me. Now you can evaluate or get the property of any variable like normal.

Once the depth is set there is no way to change it during a debug session. You have to close the existing XDebug session, update the value and start a new session. I plan on changing this in a future release of the plugin.
</content>
 </entry>
 
 <entry>
   <title>Using the Gearman Tool For Rapid Development of Clients and Workers</title>
   <link href="http://hermanradtke.com/2012/01/25/using-gearman-tool-for-rapid-development-of-clients-and-workers.html"/>
   <updated>2012-01-25T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2012/01/25/using-gearman-tool-for-rapid-development-of-clients-and-workers</id>
   <content type="html">Gearman comes with a few tools that make development and testing easier. The &lt;em&gt;gearman&lt;/em&gt; program creates boilerplate clients and workers. The &lt;em&gt;gearman&lt;/em&gt; program comes default with the gearmand package. Do not confuse &lt;em&gt;gearman&lt;/em&gt; with &lt;em&gt;gearmand&lt;/em&gt;. The &lt;em&gt;gearmand&lt;/em&gt; daemon is what manages the queue, clients and workers. The &lt;em&gt;gearman&lt;/em&gt; program is a tool to quickly create simple clients and workers. The options for &lt;em&gt;gearman&lt;/em&gt; can be slightly confusing, so I will go through a set of examples on how to use them.&lt;!--more--&gt;

I find myself using the client functionality of the &lt;em&gt;gearman&lt;/em&gt; tool most often. If I am tasked with creating or updating a gearman worker I want to test that the worker actually works. The code that sends a job to the worker is normally part of the web application and I don't want to dig through the application trying to figure out what I need to do send the job out. I could just create a simple php script that creates a client and sends the job over, but the &lt;em&gt;gearman&lt;/em&gt; tool already does this.

Example of using &lt;em&gt;gearman &lt;/em&gt;as a client:
&lt;script src=&quot;https://gist.github.com/1677655.js?file=client.sh&quot;&gt;&lt;/script&gt;
I use the &lt;em&gt;gearman&lt;/em&gt; program as a worker less often. It is still useful for creating a simple worker to test my client code against. I can write my client code without a fully functional worker if the client code is not expecting a complex response.

Example of using &lt;em&gt;gearman&lt;/em&gt; as a worker:
&lt;script src=&quot;https://gist.github.com/1677655.js?file=worker.sh&quot;&gt;&lt;/script&gt;
The &lt;em&gt;gearman&lt;/em&gt; tool comes with the standard options for specifying a specific host and port. There are a number of other options that may be of use in specific circumstances. I encourage you to read them over by typing &quot;gearman -H&quot; on the command line.
</content>
 </entry>
 
 <entry>
   <title>Registering Functions With Gearman Workers</title>
   <link href="http://hermanradtke.com/2012/01/24/registering-functions-with-gearman-workers.html"/>
   <updated>2012-01-24T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2012/01/24/registering-functions-with-gearman-workers</id>
   <content type="html">The Gearman &lt;a href=&quot;php.net/manual/en/gearman.examples.php&quot; target=&quot;_blank&quot;&gt;examples on php.net&lt;/a&gt; are a great primer for groking how the Gearman client and worker interact with each other. One gripe I have is that the examples declare global functions for the worker to register. I feel this leads develpers down the wrong path. With PHP5.3, there is an easier solution though: anonymous functions.&lt;!--more--&gt;

Declaring a global functions in a gearman worker script may not seem like a big deal, but these things have a way of catching up to you. I personally ran into this when I suggested that HauteLook start using GearmanManager to manage the gearman workers. A side affect of this is that all gearman worker scripts now run in the same instance of PHP. There were a number of occasions when workers would fail to load on production because of the global naming conflicts.

I prefer to use register anonymous functions with my gearman workers. This keeps them out of the global scope and puts the logic right next to the worker registration call. This makes hard to test the logic inside the anonymous function, but I never test that logic. I treat the functions I register with gearman as controllers. I pass the workload off to a model class that is fully unit tested.

Here is a nice example:

&lt;script src=&quot;https://gist.github.com/1673522.js?file=worker.php&quot;&gt;&lt;/script&gt;

I would update the Gearman examples on php.net, but I think a lot of people are still using PHP 5.2 (or even earlier). Providing multiple ways of registering the workers may confuse people too. Maybe next year.
</content>
 </entry>
 
 <entry>
   <title>The Painful Gearman Upgrade Path</title>
   <link href="http://hermanradtke.com/2012/01/23/the-painful-gearman-upgrade-path.html"/>
   <updated>2012-01-23T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2012/01/23/the-painful-gearman-upgrade-path</id>
   <content type="html">The Gearman project has been slowly migrating from C to C++. This migration has gone under the radar due to the popularity of Cent OS 5 and given gearmand version of 0.14. This version of gearmand worked with any version of pecl/gearman and there was never any compelling reason to upgrade gearmand. That changed with the release of pecl/gearman 1.0

&lt;!--more--&gt;The release of pecl/gearman 1.0 included a fix to the exception handling of gearman workers. An uncaught exception would go unnoticed by the gearmand server before pecl/gearman 1.0. The only way to work around this was to catch all exception and explicitly return a failure code to gearmand. I fixed this by making by detecting an exception with the pecl/gearman code and sending a special exception message to the gearmand server. Unfortunately, the API for sending the exception message was introduced in gearman 0.21.

I did not think much of the new gearmand requirement when fixing this bug. Since that time I have been introduced to the painful upgrade process of gearmand. I think this pain is mostly felt by those using Linux distributions with long term support. The first hurdle to get over is the fact that gearmand 0.21 requires the boost 1.41 libraries. A default Cent OS install only provides boost 1.39 libraries. There was a 3rd party that provided boost 1.41 libraries for Cent OS, but they used a non-standard installation directory. After some experimenting, I did find a fix: &lt;a href=&quot;http://groups.google.com/group/gearman/msg/12bcc13691e132ae&quot;&gt;http://groups.google.com/group/gearman/msg/12bcc13691e132ae&lt;/a&gt;.

The good news is that upgrading to Cent OS 6 makes compiling gearman much easier with the inclusion of boost 1.41 libraries by default. The next problem comes when trying to submit a patch. Cent OS 5 comes with aclocal 1.9 and the gearman project requires aclocal 1.11. Again, upgrading to Cent OS 6 makes life easier as it comes with aclocal 1.11 by default. I learned the hard way that the gearman project also requires autoconf 2.64, but Cent OS 6 only provides autoconf 2.63. The 2.64 version of autoconf provides a macro named m4_ifnblank which is required to build the configure script used to compile gearman. You can see me answer my own question here: &lt;a href=&quot;https://answers.launchpad.net/gearmand/+question/185592&quot;&gt;https://answers.launchpad.net/gearmand/+question/185592&lt;/a&gt; regarding the autoconf issue.

These build issues have made it tough for users to upgrade to the pecl/gearman 1.x line. I think I will be forced to maintain the pecl/gearman 0.8.x line for some time with bug fixes as users struggle to get gearmand 0.21 on their Cent OS 5 servers. I have definitely learned to do more research on migration paths before requiring a newer dependency version.
</content>
 </entry>
 
 <entry>
   <title>SPL FilterIterator in the real world</title>
   <link href="http://hermanradtke.com/2011/12/15/spl-filteriterator-in-the-real-world.html"/>
   <updated>2011-12-15T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/12/15/spl-filteriterator-in-the-real-world</id>
   <content type="html">The Standard PHP Library (SPL) is a powerful set of tools that are often overlooked. It is very common to see an SPL talk at conferences, but those talks usually just introduce each SPL class to the audience without giving some real world examples. I am going to show you a real world example on how to use SPL FilterIterator in an ecommerce website.
&lt;!--more--&gt;
This particular ecommerce website sells actual goods. One problem with selling actual goods, instead of virtual goods, is the supply can run out. I have a simple use-case where I don't want to display an item that is sold out. Consider the following example data:

&amp;nbsp;
&lt;script src=&quot;https://gist.github.com/1483101.js?file=data.php&quot;&gt;&lt;/script&gt;
&amp;nbsp;

This is a pretty common use case and I am sure most people would write the logic something like this:

&amp;nbsp;
&lt;script src=&quot;https://gist.github.com/1483101.js?file=procedural.php&quot;&gt;&lt;/script&gt;
&amp;nbsp;


There is nothing logically wrong with this code. It is a very readable and easy to understand way to write it. With the rise in popularity of JavaScript and other functional languages, some of us may take a different approach. Using the underscore framework (available for both PHP and JavaScript), you could also write it like this:

&amp;nbsp;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://gist.github.com/1483101.js?file=functional.php&quot;&gt;&lt;/script&gt;
&amp;nbsp;

The use of a callback function should be familiar to anyone with at least a basic knowledge of JavaScript. The callback function is evaluating each item in the iterator to true or false. The major drawback to both of the code snippets is that the logic for determining whether or not an item is sold out is not able to be re-used. The use of procedural code in the first example and the use of an anonymous function in the second example also make it hard to test. We can improve the second example by not using an anonymous callback:

&amp;nbsp;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://gist.github.com/1483101.js?file=functional2.php&quot;&gt;&lt;/script&gt;
&amp;nbsp;

Now I can re-use this function and easily test it. We can use SPL FilterIterator in a very similar way to the functional example:

&amp;nbsp;
&lt;script src=&quot;https://gist.github.com/1483101.js?file=spl.php&quot;&gt;&lt;/script&gt;
&amp;nbsp;

Now my logic for what constitutes a soldout item is isolated in a class. This coincides with the object oriented principle of &quot;encapsulate what varies&quot;. I think the biggest stumbling block for using SPL is that it just seems too heavy. You might be wondering why you should go to the trouble of creating a new class to perform such a simple task. The procedural example above is faster to write. Some of us might be tempted to use the functional example with an anonymous function because it feels more &quot;expressive&quot;. Now consider what happens when the ecommerce system introduces returns. The new formula for determining a soldout item is now:

&lt;code&gt;
availability = (purchased - sold) + returned
&lt;/code&gt;

This isn't some hypothetical example, it actually happened. It was real easy to update the logic to handle returns and make sure the tests passed.

The last decision you have to make is whether or not to put the logic in a database query. If there is a huge performance boost by writing the logic into the query, it may be worthwhile. A query is still testable, but you have to setup some test data in the database in order to test it (which means you probably won't do write the test for it). It is harder to re-use queries, so the business logic for determining sold out items may be duplicated over a number of queries too. You also might want to consider what happens if you decide to alleviate the database load by putting the list of items for sale in a cache (like APC or memcache).

The SPL classes, especially FilterIterator, really start to shine when dealing with a dataset outside of our control. More and more platforms are becoming service based and we have no control over how the data comes back. Especially when you consider something like the Twitter API timeline response and trying to filter out any tweet that starts with &quot;RT&quot;.
</content>
 </entry>
 
 <entry>
   <title>PHP Gearman Bootstrap Script</title>
   <link href="http://hermanradtke.com/2011/12/09/php-gearman-bootstrap-script.html"/>
   <updated>2011-12-09T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/12/09/php-gearman-bootstrap-script</id>
   <content type="html">Writing the scaffolding for gearman workers is a pretty trivial task using the pecl/gearman extension. Keeping that scaffolding consistent between all the gearman workers in your application can get tough. I created a script that will remove the boilerplate gearman code and allow gearman worker scrips to simply be function definitions.&lt;!--more--&gt;The idea for gearboot first came to me when I was using GearmanManager to manage production gearman workers. The GearmanManager code assumes that the workers are simply function definitions. This makes it easy to write and organize the workers, but it makes common tasks like debugging workers painful as all output is hidden

In order to make development of the gearman workers easier, I created a script to startup the gearman worker in a similar manner to the GearmanManager. The major benefit is that any sort of error or exception is shown right on the terminal screen. No digging through logs wasting time tying to figure out what happened. If you have logging already setup, it is now trivial to add a stdout writer to the logger when running php in cli mode.

One of the biggest complaints I heard from fellow developers was that they had a hard time trying to figure out if the worker actually received the job from the client. I added a logging to stdout that signals when a job is received and what a job is finished.

I setup a pear channel to make installation real easy. For installation instructions and some examples check out the github page page: &lt;a href=&quot;https://github.com/hradtke/gearboot&quot; target=&quot;_blank&quot;&gt;https://github.com/hradtke/gearboot&lt;/a&gt;
</content>
 </entry>
 
 <entry>
   <title>PEAR channel created</title>
   <link href="http://hermanradtke.com/2011/12/09/pear-channel-created.html"/>
   <updated>2011-12-09T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/12/09/pear-channel-created</id>
   <content type="html">I finally got around to creating my own PEAR channel. I am hosting it on github using &lt;a title=&quot;The simple PEAR Channel Server Manager &quot; href=&quot;http://pirum.sensiolabs.org/&quot; target=&quot;_blank&quot;&gt;Pirum&lt;/a&gt; to manage the channel. The channel is located at &lt;a title=&quot;hradtke PEAR channel&quot; href=&quot;http://hradtke.github.com/pear/&quot; target=&quot;_blank&quot;&gt;http://hradtke.github.com/pear/&lt;/a&gt;. So far I have a single package in then channel: &lt;a title=&quot;gearboot PEAR download link&quot; href=&quot;http://hradtke.github.com/pear/get/gearboot-1.0.0.tgz&quot; target=&quot;_blank&quot;&gt;gearboot&lt;/a&gt;. I will be writing more about gearboot shortly.
</content>
 </entry>
 
 <entry>
   <title>ORM frameworks are black magic</title>
   <link href="http://hermanradtke.com/2011/12/02/orm-frameworks-are-black-magic.html"/>
   <updated>2011-12-02T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/12/02/orm-frameworks-are-black-magic</id>
   <content type="html">I read a really good post from &lt;a title=&quot;The Last PHP PDO Library You Will Ever Need &quot; href=&quot;http://leftnode.com/entry/the-last-php-pdo-library-you-will-ever-need&quot; target=&quot;_blank&quot;&gt;Vic on his move away from ORM frameworks&lt;/a&gt;. I did not agree with everything he said though and wanted to start a discussion. Unfortunately, there is no way to leave comments on his blog. The next best thing is to post it here.

&lt;!--more--&gt;Like Vic, I too have moved away from using ORM frameworks. One of my biggest problems with ORM frameworks is that they become a de-facto language within themselves. Instead of learning how to write proper SQL according to the SQL-99 standard, I now have to learn SQL and the syntax of the ORM. Things only get worse from there when trying to debug problems of performance and correctness.

There are some niche tasks where I still use an ORM despite the costs mentioned by Vic and myself. An ORM is great for creating dynamic queries. As we build more rich front-end web applications, it is very easy to build queries with user specified filters and sorting. Trying to do this manually is time-consuming and often bug prone. I find this setup particularly useful when building administrative pages that are looking at lists of things like users or orders. Performance is not a real big issue here and the queries themselves are usually only joining one or two tables. There is still the risk of a runaway query wreaking havoc on your master database. To combat this scare, I advocate a separate slave database to run queries like this.

Vic mentioned that he puts the SQL directory in the controllers, but I think this is a mistake. Controllers are tying the view to the model and should not contain any other logic. I prefer to keep business logic at the library level and data access logic in the model. The controller can consume library or model classes at will and pass them over to the view for output. This may seem like an extra step that is not needed, but it makes testing much easier. There is also the added benefit of being able to write a service layer or API with very little effort should the need arise.

All in all I think Vic makes a good argument. I think developers need to learn to embrace databases, SQL or NoSQL, instead of trying to abstract them away. Data is often the most important part of the business and it should be treated as such.
</content>
 </entry>
 
 <entry>
   <title>Code Freeze Fun at HauteLook</title>
   <link href="http://hermanradtke.com/2011/11/30/code-freeze-fun-at-hautelook.html"/>
   <updated>2011-11-30T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/11/30/code-freeze-fun-at-hautelook</id>
   <content type="html">I wrote a &lt;a href=&quot;http://www.hautelooktech.com/2011/11/30/code-freeze-fun/&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt; listing some of the things I have been doing during code freeze at &lt;a href=&quot;http://www.hautelook.com&quot; target=&quot;_blank&quot;&gt;HauteLook&lt;/a&gt;. HauteLook is hiring developers for PHP, JavaScript and iOS positions. If you live in the Los Angeles area and are interested check out the &lt;a href=&quot;http://www.hautelook.com/careers&quot; target=&quot;_blank&quot;&gt;careers&lt;/a&gt; page.
</content>
 </entry>
 
 <entry>
   <title>Testing PHP 5.4RC1</title>
   <link href="http://hermanradtke.com/2011/11/22/testing-php-5-4rc1.html"/>
   <updated>2011-11-22T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/11/22/testing-php-5-4rc1</id>
   <content type="html">I wrote a quick &lt;a title=&quot;Testing PHP 5.4RC1 &quot; href=&quot;http://www.hautelooktech.com/2011/11/18/testing-php-5-4rc1/&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt; on &lt;a title=&quot;HauteLook Engineering Blog&quot; href=&quot;http://www.hautelooktech.com/&quot; target=&quot;_blank&quot;&gt;HauteLook's Tech blog&lt;/a&gt; about testing PHP5.4 RC1 for HauteLook's ecommerce web application.
</content>
 </entry>
 
 <entry>
   <title>ElePHPants for sale!</title>
   <link href="http://hermanradtke.com/2011/11/20/elephpants-for-sale.html"/>
   <updated>2011-11-20T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/11/20/elephpants-for-sale</id>
   <content type="html">I recently ordered some elePHPants and have some left over for sale. I added a Paypal button to the right menu of my blog for anyone interested in purchasing them. I only have the small size up for sale. If you are interested in the large size contact me and we can discuss it.

&lt;img class=&quot;alignnone&quot; title=&quot;ElePHPant family&quot; src=&quot;http://farm7.staticflickr.com/6169/6172728723_20be922a1a.jpg&quot; alt=&quot;A picture of four PHP elephants&quot; width=&quot;500&quot; height=&quot;299&quot; /&gt;
</content>
 </entry>
 
 <entry>
   <title>Please Do Not Interface the PHP World</title>
   <link href="http://hermanradtke.com/2011/10/22/please-do-not-interface-the-php-world.html"/>
   <updated>2011-10-22T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/10/22/please-do-not-interface-the-php-world</id>
   <content type="html">This started out as a quick response to a blog post titled &lt;a href=&quot;http://pooteeweet.org/blog/2008&quot;&gt;Interfacing the PHP World&lt;/a&gt; by Lukas Kahwe Smith, but it quickly turned into a blog post of its own.

I think common interfaces would be bad for PHP. I find it ironic that a &lt;a href=&quot;http://pooteeweet.org/blog/2008/2009#m2009&quot;&gt;comment made by Stephen&lt;/a&gt; is advocating a Java-like dictatorship to move PHP forward. PHP is much more successful and widely used than Java. It is Java should be learning from PHP, not the other way around. PHP is an ugly language with a mish-mash of syntax and conventions that makes the code not very pretty (especially compared to Python). PHP's only saving grace is that it actually gets things done. And luckily, for PHP, that is all that really matters.

Caching, logging and http clients may seem like simple things to standardize, but the mere fact that there are so many differing implementations is proof that they are not so simple. This reminds me of the SimpleCloud framework that tries to standardize the different cloud APIs: there is nothing simple about it! Furthermore, trying to standardize things can kill innovation and creativity. I fear the community will reject a new way to do things on the basis that the code does not implement the standard PHP interfaces. The Lithium framework, which takes a very different approach to frameworks, might not even exist if these interfaces were around a few years ago.

The most progress comes about when people reject or ignore the so called &quot;truths&quot; that surround them. The recent PHP fork is evidence of this. Forking PHP was a huge &quot;no no&quot; (despite the ironic fact that PHP is open source). That fork sparked both change and debate and had a positive effect. The author of the fork had tried to play by the rules setup by the PHP internals team and got nowhere. It was only when he decided to publish a fork that people (particularly those in internals) actually started paying attention.

This notion of interoperability between frameworks is just like trying to achieve nirvana. It is good to try, but never truly attainable. Look at PDO, a (supposedly) &quot;lightweight, consistent interface for accessing databases in PHP&quot;. Except that it doesn't work with any of the NoSQL databases. One may argue that PDO is for SQL databases only, except that no one even considered that fact when it was being written. Simply read http://us2.php.net/manual/en/intro.pdo.php and it makes no mention of being SQL only. It assumed that SQL was all there was at the time of writing. The SQL-99 standard was the gospel for databases. This is the danger in defining standard interfaces. The advent of NoSQL made PDO largely irrelevant. The same fate will happen to any standard interface that we come up with today.

I encourage freedom the create new things. I don't want all of my frameworks playing by the same rules. If they are all using common interfaces, then we might as well merge all of the frameworks because the competition is over. Instead, let the adoption rate of the framework be the measure of success. I believe this is why PHP has been so successful. Rasmus has the courage to not try and define or predict what PHP needs. He lets the people using PHP decide what they need. This is in stark contrast to other people in internals that try to exert control of the process and define rigid rules and policies. PHP is not a purely procedural, object oriented or functional language. It is a mashup of all kinds of concepts and ideas. The cool thing is that it works.
</content>
 </entry>
 
 <entry>
   <title>Gearman Worker Exception Handling in PHP</title>
   <link href="http://hermanradtke.com/2011/08/20/gearman-worker-exception-handling-in-php.html"/>
   <updated>2011-08-20T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/08/20/gearman-worker-exception-handling-in-php</id>
   <content type="html">Gearman is one of my favorite technologies to use. So much in fact that I recently decided to take over the maintenance of pecl/gearman. While asynchronous tasks are a great feature, I find the ability to run multiple tasks in parallel to be much more useful. One of the biggest shortcomings of this approach was that uncaught worker exceptions would be treated as a successful completion of a job. I used to wrap all my workers in a generic try/catch block to prevent this from happening.  With the latest commits to pecl/gearman, I can now use the exception callback to properly track the exceptions.

&lt;!--more--&gt;I use Gearman for most of my batch processing problems. The process is simple: create any number of tasks using GearmanClient::addTask() and then run the tasks in parallel with GearmanClient::runTasks(). All available workers that can handle that task will be used. In order to keep track of the batch process, I define callback functions in GearmanClient::setCompleteCallback() and GearmanClient::setFailCallback().

&lt;script type=&quot;text/javascript&quot; src=&quot;https://gist.github.com/1159750.js?file=gearman-client-batch-example.php&quot;&gt;&lt;/script&gt;

&lt;p&gt;Every once in a while one of the workers would throw an exception that would not be caught. One would expect that this would trigger GearmanClient::setExceptionCallback(). Until recently, pecl/gearman was not properly handling exceptions from workers. This might not be so bad if an uncaught exception sent back a status of GEARMAN_WORK_FAIL and triggered the fail callback. The problem was that an uncaught worker exception actually sent back GEARMAN_SUCCESS. This made it appear to the client that the tasks was successfully completed. The workaround at the time was to wrap all workers in a generic try/catch block to prevent any uncaught exceptions. The catch block would then need to explicitly send back a status of GEARMAN_WORK_FAIL. This caused a lot of boilerplate code and each developer had to become intimately aware of how fickle pecl/gearman was with exceptions.&lt;/p&gt; 

&lt;p&gt;I decided to fix pecl/gearman to properly trigger the exception callback in the event of an uncaught exception. The worker would still die, but now the client would be properly informed. This has to be done in two parts. I had to first update the pecl extension to detect when an exception occurred. The second part was sending back the proper status to the Gearman daemon so the client could be informed. This was a little more tricky than it first appeared. The Gearman daemon does not automatically handle the exception status. Both the client and the worker have to tell the Gearman daemon that they want to enable exceptions when they connect. Once I figured out how to do this using libgearman I was able to trigger the exception callback.&lt;/p&gt; 

&lt;p&gt;This exposed another issue with the way libgearman works. Because the exception handling is optional, the worker will send back a status of GEARMAN_WORK_FAIL even a status of GEARMAN_WORK_EXCEPTION was already sent. This means that the fail callback can be triggered after the exception callback. You can have the exception callback return a status of GEARMAN_WORK_EXCEPTION, but that will cause the entire batch process to stop. I am working with Brian Aker, who maintains libgearman, to see if something can be changed. Until then, I am required to keep track of tasks that threw an exception and check that list in the fail callback.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://gist.github.com/1159694.js?file=gearman-client-exception-callback.php&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://gist.github.com/1159700.js?file=gearman-worker-exception.php&quot;&gt;&lt;/script&gt;
</content>
 </entry>
 
 <entry>
   <title>Hacking Google Reader API</title>
   <link href="http://hermanradtke.com/2011/08/03/hacking-google-reader-api.html"/>
   <updated>2011-08-03T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/08/03/hacking-google-reader-api</id>
   <content type="html">I have wanted to replace the static Blogroll on my website with a listing of my Google Reader subscriptions. I figured this was easy and someone would have already made this a Wordpress plugin, but I was wrong. The Google Reader API is not yet official and not very well documented. I finally sat down to figure out exactly how to do this and with a little Google research I managed to hack together a working prototype.&lt;!--more--&gt;

&lt;script src=&quot;https://gist.github.com/1127778.js?file=google-reader-subscriptions.php&quot;&gt;&lt;/script&gt;

The problem is broken down into two steps. The ClientLogin part of the Google Data Protocol must be used to obtain an Auth token. The ClientLogin is simply a GET request with three paramters. The service parameter gives the user access to the particular API. In this case, the service parameter value is &quot;reader&quot; for Google Reader. The next two parameters are email and password. These values are the same as what one would use to login to Google Reader using a normal webpage. The response will contain newline delimited key/value pairs. One of those pairs will be the Auth token.

Requests to the Google Reader API can then be made using this Auth token in an Authorization header. I chose to add the &quot;output&quot; parameter to my request so the response would be json instead of the default xml.

Here are some of the resources I used to figure this all out:
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/pyrfeed/wiki/GoogleReaderAPI&quot; target=&quot;_blank&quot;&gt;GoogleReaderAPI&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.martindoms.com/2009/08/15/using-the-google-reader-api-part-1/&quot; target=&quot;_blank&quot;&gt;Using the Google Reader API&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;
&lt;div&gt;
&lt;div&gt;&lt;a href=&quot;http://groups.google.com/group/fougrapi/browse_thread/thread/e331f37f7f126c00?pli=1&quot; target=&quot;_blank&quot;&gt;Changes to sending authenticated requests to Google Reader&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://code.google.com/apis/gdata/docs/auth/clientlogin.html&quot; target=&quot;_blank&quot;&gt;ClientLogin in the Google Data Protocol Client Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
Using this prototype I will create a Wordpress widget to display my Google Reader subscription list and get rid of my static Blogroll.
</content>
 </entry>
 
 <entry>
   <title>Twitter provides more social discovery than Google+</title>
   <link href="http://hermanradtke.com/2011/07/17/twitter-provides-more-social-discovery-that-google.html"/>
   <updated>2011-07-17T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/07/17/twitter-provides-more-social-discovery-that-google</id>
   <content type="html">There is a lot of &lt;a title=&quot;Google+ has made Twitter boring, here’s what Twitter should do about that&quot; href=&quot;http://scobleizer.com/2011/07/17/google-has-made-twitter-boring-heres-what-twitter-should-do-about-that/&quot; target=&quot;_blank&quot;&gt;talk&lt;/a&gt; about Google+ being more of a &lt;a title=&quot;Is Google+ a bigger threat to Facebook or Twitter?&quot; href=&quot;http://www.quora.com/Is-Google+-a-bigger-threat-to-Facebook-or-Twitter&quot; target=&quot;_blank&quot;&gt;threat&lt;/a&gt; to Twitter than Facebook. While I don't deny that is true, I think Twitter still allows for great social discovery. When people retweet or reply to tweets it engages people from the outside. &lt;!--more--&gt;

I joined Twitter late compared to most of the people I interact with. I did not see the value in it at first, but gradually began to understand how important it is in keeping up with the open source community. I signed up and started following those same people whose blogs I read. As those people tweeted I gradually began to follow more and more people that interested me. The re-tweet is a great for discovering new blogs or projects that interest me. A re-tweet is an awesome way for someone to point out something they think is interesting. The re-tweet takes only seconds as well. Twitter conversations are harder to follow, but it is a conversation fragment is usually enough to decide it the conversation is interesting enough to find the main thread. The Twitter website does try and track what tweet was in reply to another tweet, but it is definitely lacking.

I have yet to find this same sort of social discovery on Facebook. I really don't use Facebook that much because I feel that I am interacting with the same people I always interact with. I do see new faces that comment on posts of people I follow. However, I want to see people I follow commenting on posts of people I don't follow. Even better, I want people I follow to highlight a good article, blog post or conversation. I feel that when people comment on something, they are less likely to then re-tweet it. Most of the re-tweets I see have a short opinion in front of them, such as &quot;Amazing read! RT ...&quot;.

All the cool new bells and whistles of Google+ are great. However, I think Twitter will still remain important among the tech-savvy crowd until Facebook or Google+ provide that a better method of social discovery.
</content>
 </entry>
 
 <entry>
   <title>How PHPUnit saved HauteLook a lot of duckles</title>
   <link href="http://hermanradtke.com/2011/07/14/how-phpunit-saved-hautelook-a-lot-of-duckles.html"/>
   <updated>2011-07-14T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/07/14/how-phpunit-saved-hautelook-a-lot-of-duckles</id>
   <content type="html">&lt;p style=&quot;text-align: left;&quot;&gt;Yesterday I tweed that a phpunit test prevented a very expensive error at &lt;a href=&quot;http://www.hautelook.com/&quot;&gt;HauteLook&lt;/a&gt;. I had shared the details internally, but after receiving some positive twitter feedback I decided to make the story public. I am of the opinion that unit tests are a worthwhile investment. Knowing full-well that some people are very skeptical of unit tests, I think it is important to have real world examples of unit tests paying valuable dividends on that investment.&lt;!--more--&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://twitter.com/#!/hermanradtke/status/91300142115848192&quot;&gt;&lt;img class=&quot; aligncenter&quot; title=&quot;PHPUnit tweet&quot; src=&quot;http://farm7.static.flickr.com/6135/5937415462_af24107870.jpg&quot; alt=&quot;A #phpunit test just prevented a very expensive error. This is a perfect real world example for my next unit testing presentation.&quot; width=&quot;492&quot; height=&quot;213&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
A few days ago Hudson began emailing alerts that a freight calculation unit test was failing in production. I emailed the developers responsible for the code and asked them to investigate this right away. The funny thing about unit tests failing in production is that developers can fall into a mindset of &quot;the code is working on production, so there must not be a problem&quot;. The freight calculations did appear to be working correctly on production. Because we are so busy, no further investigation was done until yesterday.

Yesterday afternoon two developers realized that this failing unit test was the result of a serious regression in our &quot;premium&quot; freight calculation. This freight calculation type is most commonly used for furniture items and can easily calculate a shipping cost well over $100. This particular bug was calculating the &quot;premium&quot; freight costs as free. Now HauteLook's business model is flash sales. This means new sales events start at 8:00 am PT each morning and most of the business is done within the first few hours of the event. If there had been a furniture sale event within the past couple of days, HauteLook would have given away thousands of dollars worth of free shipping (or even tens of thousands if the event was large enough) before we would have noticed and fixed the issue. Shipping costs were not the only thing we saved either. The amount of  time, energy and stress that it would have taken for the various  departments to address this issue would have been high.

I saw an immediate change in the way my colleagues view unit tests. This was a clear indication that our investment has paid off. In this case we had well written unit tests that quickly alerted us to a problem before it costs us anything. I know next time a unit tests fails on production, HauteLook developers will not assume everything is working.
</content>
 </entry>
 
 <entry>
   <title>managing multiple jQuery promises</title>
   <link href="http://hermanradtke.com/2011/05/12/managing-multiple-jquery-promises.html"/>
   <updated>2011-05-12T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/05/12/managing-multiple-jquery-promises</id>
   <content type="html">The new jQuery 1.5 version has support for promises.  Promises allows code to be dependent on the completion of an asynchronous event.  Promises are most commonly used when making an AJAX request.  I recently had to solve a problem where I was issuing many AJAX requests and wanted to make sure all were completed before moving on to the next task.  To make matters more complicated, I was issuing the requests using jsonp.  Some of the requests were chained from other requests as well.  Trying to track all the promises by individually was becoming a mess.  After speaking with a colleague, I set about creating a function to manage multiple promises.&lt;!--more--&gt;

If you are unfamiliar with promises, I suggest you read this &lt;a title=&quot;Using Deferreds in jQuery 1.5&quot; href=&quot;http://www.erichynds.com/jquery/using-deferreds-in-jquery/&quot; target=&quot;_blank&quot;&gt;article&lt;/a&gt;.  I borrowed the code for managing multiple promises from &lt;a title=&quot;Promise utilities for node&quot; href=&quot;https://github.com/kriszyp/node-promise&quot; target=&quot;_blank&quot;&gt;https://github.com/kriszyp/node-promise&lt;/a&gt;.  Essentially, we can use a promise to wrap many promises.  Only once the given set of promises are completely resolved does the wrapper promise resolve itself.  This is commonly called &quot;all()&quot;.
&lt;pre lang=&quot;javascript&quot;&gt;var all = function(array){
    var deferred = $.Deferred();
    var fulfilled = 0, length = array.length;
    var results = [];

    if (length === 0) {
        deferred.resolve(results);
    } else {
        array.forEach(function(promise, i){
            $.when(promise()).then(function(value) {
                results[i] = value;
                fulfilled++;
                if(fulfilled === length){
                    deferred.resolve(results);
                }
            });
        });
    }

    return deferred.promise();
};&lt;/pre&gt;
Looking at the implementation, the above function is pretty straightforward.  Let's look at an example on how to use it.
&lt;pre lang=&quot;javascript&quot;&gt;var users = ['john', 'ringo', 'paul', 'george'];
var promises = [];

users.forEach(function(user) {
    promises.push(function() {
        return $.Deferred(function(dfd) {
            $.get('/account/' + user, function(data) {
               dfd.resolve(data);
            });
        }).promise();
    });
});

$.when(all(promises)).then(function(results) {
    // do something with the results
});&lt;/pre&gt;
The above example is making a series of requests for account information on a list of users.  Looping over the array of users, we push an anonymous function into an array call promises.  This anonymous function simply gives all() something to execute when call it.  We then wrap each ajax request in a promise  using $.Deferred().  We specify a callback that is the ajax request and then call promise() on $.Deferred.  The effect of this is that the all() function will iterate of the array of promises and execute each anonymous function.  The anonymous function returns the promise and the all() function keeps track of the state of each promise.  Once all the promises have been resolved, the all() function will resolve itself internal promise.  This allows use to use the all() function as single argument to $.when() that represents a set of promises we are expecting to finish.
</content>
 </entry>
 
 <entry>
   <title>Writing debuggable code</title>
   <link href="http://hermanradtke.com/2011/05/10/writing-debuggable-code.html"/>
   <updated>2011-05-10T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/05/10/writing-debuggable-code</id>
   <content type="html">Coding standards are religious in nature, ranking high on the list near &lt;a href=&quot;http://www.google.com/search?q=vim+vs+emacs&quot;&gt;vim vs emacs&lt;/a&gt;.  Paul Reinheimer woke up many in the twitterverse with a simple post:
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img class=&quot;aligncenter&quot; title=&quot;Paul Reinheimer handling errors early tweet&quot; src=&quot;http://farm3.static.flickr.com/2044/5709402756_f46668f760_z.jpg&quot; alt=&quot;Paul Reinheimer handling errors early tweet&quot; width=&quot;542&quot; height=&quot;112&quot; /&gt;&lt;/p&gt;
This got me thinking about why I prefer to write code the way I do.  I figure most people choose a standard because they are of the opinion that a certain style of coding is more readable and less error prone.  Others are forced to by the community they want to develop in, such as  PEAR or Zend Framework.  I choose my standard for one reason: debug-ability.&lt;!--more--&gt;

Debug-ability is simply writing code in such a way that it makes it easy to step through the code in a debugger.  I built my career using a debugger.  My first programming job out of college was at a C shop that started in the late 1980's.  My college professors instructed me using C++, so I was somewhat familiar with the C/C++ variety of languages.  After looking at the C code on my first day of work, I quickly realized I had a lot to learn.  Luckily I was well versed in gdb.  For those not familiar with gdb, gdb is the GNU C debugger.  It is probably the most important tool for anyone working with the C code.  There was no way I could grok some of the logic, such as pointer arithmetic, in the code without stepping through it with gdb and poking at it.  This invaluable experience has made me a debugger zealot.  Not only that, but I find that fixing bugs is usually a therapeutic exercise for me.

I am constantly surprised at the number of web developers who still do not use a debugger. Before &lt;a href=&quot;http://www.xdebug.org/&quot;&gt;Xdebug&lt;/a&gt; and &lt;a href=&quot;http://getfirebug.com/&quot;&gt;Firebug&lt;/a&gt; were created, web development drove me nuts.   Finding bugs always felt like game of cat and mouse as I riddled the  source code with calls to die('here') (or alert('here') for the Javascript code)  until I found the bug.  Yet, I still find many developers using a combination of y() and die() to solve problems.  Xdebug has been out for years, is easy to setup and makes finding that bug in your code so much easier.

So, what do I consider debuggable code to look like?  Code that has one statement per line.  I don't care about braces, naming conventions, line endings, tabs/spaces or anything else that has little effect on how the code runs.  One statement per line makes it much easier to determine exactly what the code is doing when stepping through the debugger.  This may seem like a pain since it will cause files to have more lines, but I don't care.  The time it takes to write the code is only 20% of that codes lifecycle.  The other 80% is maintenance where it is being extended, bug fixed and maybe even refactored.  Taking a little bit of extra time to wrote easy to debug code in beginning is an investment that will quickly pay off.

Here are some examples of code that were not written with debug-ability in mind:
&lt;pre lang=&quot;php&quot;&gt;if (!$foo) doSomething();&lt;/pre&gt;
This makes it hard to tell if doSomething() was actually called.  Sure I can print the value of $foo in the debugger, but letting the debugger step through the code leaves all guess work out.  There are still a lot of developers who think doSomething() will be executed if the previous line of code was: $foo = array().  No amount of var_dump is going to show that an empty array is falsy in php.  Putting the call to doSomething() on a second line makes it very clear if that line of code was executed when stepping through it on the debugger.
&lt;pre lang=&quot;php&quot;&gt;if (firstFunc() &amp;amp;&amp;amp; secondFunc()) {
    // do something ...
}&lt;/pre&gt;
How do we know if both functions were called?  We might add breakpoints to both functions so we can track it, but it is much easier to assign the results of each function to a variable and put the two variables in an if statement.
&lt;pre lang=&quot;php&quot;&gt;if ($a &amp;amp;&amp;amp; ($b || $c) &amp;amp;&amp;amp; !someOtherCheck()) {
    // do some stuffs ...
}&lt;/pre&gt;
Similar to the last line of code, but it is important to note.  Complex if statements are very hard to debug.  I prefer to break this statement apart into separate if statements and use a variable or two to track the results of each section.  This might not always be possible, but it works a great deal of the time.
&lt;pre lang=&quot;php&quot;&gt;$r = $data[isset($a) ? $a : 'default'];&lt;/pre&gt;
Logic inside to create an array key is fine, but assigning it to a variable makes it a lot more clear as to what is being looked up.  I chose to highlight a ternary operator here as I see a lot of younger developers using it for the sole reason that it is less typing and takes up less space than writing out a proper if statement.

All of the above statements can be inspected using a debugger with a little extra work, but when you are stepping through hundreds of lines of code searching for a bug all of these little bits of extra work add up.  The debugger does not lie and the simplest little bits of code can hide the most glaring bugs.  Start writing code with debug-ability in mind and, if you have not already, start using your debugger.
</content>
 </entry>
 
 <entry>
   <title>Patching a bug in a pecl extension</title>
   <link href="http://hermanradtke.com/2011/05/08/patching-a-bug-in-a-pecl-extension.html"/>
   <updated>2011-05-08T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/05/08/patching-a-bug-in-a-pecl-extension</id>
   <content type="html">In my &lt;a title=&quot;Building php pecl extensions&quot; href=&quot;http://www.hermanradtke.com/blog/building-php-pecl-extensions/&quot; target=&quot;_blank&quot;&gt;last post&lt;/a&gt; I explained how to build a development version of a pecl extension.   Now we will go through the bug lifecycle in the pecl/memcache extension.  Besides writing the actual C code to fix the bug, it is considered a best practice to write a test that verifies the bug has been fixed.  I will use &lt;a title=&quot;memcache_set fail with integer value&quot; href=&quot;http://pecl.php.net/bugs/bug.php?id=16442&quot; target=&quot;_blank&quot;&gt;PECL bug #16442 - memcache_set fail with integer value&lt;/a&gt; as an example, even though it is already been fixed.&lt;!--more--&gt;

Whether creating a patch for a bug fix yourself or applying a users patch to an existing bug, the process is pretty much the same.  The very first thing I do is create a &lt;a title=&quot;PHP QAT website&quot; href=&quot;http://qa.php.net/write-test.php&quot; target=&quot;_blank&quot;&gt;.phpt&lt;/a&gt; test for the bug.  A .phpt test is a functional test used in php core and many pecl extensions.  All bug fixes should include a simple test so we can verify the bug is indeed fixed by the patch and to prevent a regression in the code where the bug is reintroduced.  The .phpt functional tests are quick to write and have such a positive long term investment I rarely find myself not wanting to write them.

Here is an example test:
&lt;code&gt;
--TEST--
PECL bug #16442 (memcache_set fail with integer value)
--FILE--
&amp;lt;?php

include 'connect.inc'; 

memcache_set($memcache, 'test123112', 1, MEMCACHE_COMPRESSED, 30);
$ret = memcache_get($memcache, 'test123112');
var_dump($ret);
echo &quot;Done\n&quot;;
?&amp;gt;
--EXPECT--
int(0)
Done
&lt;/code&gt;

There are three basic parts to a .phpt file: test information, the test itself and the expected test results.  The test information section is denoted by the &quot;--TEST--&quot; heading.  This is where information about the test is placed.  For bug fixes I normally include the bug number and a brief description of the bug.  The brief description sometimes matches the bug title, but there are cases where the bug title doesn't describe the actual bug so I will make a better description up.

After the informational block  is the actual test itself, denoted by the &quot;--FILE--&quot; heading.  The test itself is always normal php code.  You will notice that the test includes a 'connect.inc' file.  This is a standard convention for tests that depend on some outside system or environment.  In the case of pecl/memcache, the connect.inc sets up a number of connections to memcache using various ip addresses, ports and protocols (tcp and udp).  This is done to make sure all tests are testing against the same servers and to reduce the amount of boilerplate code in the tests.  It is considered a best practice to use var_dump() for any kind of test output.  This makes the output as explicit as possible.  You will also notice many tests end with an echo &quot;OK\n&quot; or an echo &quot;Done\n&quot; statement.  This is done to explicitly define the end of the test.  This can help catch extra test output, such as warnings or errors, that should cause the test to fail.

The last section is the expected test results section.  There are a number of different ways to express test results, including normal string comparison (--EXPECT--), printf style formatting (--EXPECTF--) and regular expressions(--EXPECTREGEX--).  Explaining how each of them work and when to use each one is would take an entire blog article itself.  Luckily, the PHP QA team has an &lt;a href=&quot;http://qa.php.net/write-test.php&quot; target=&quot;_blank&quot;&gt;article&lt;/a&gt; that discussions each one in detail.  I almost always use EXPECTF for the test results, even if I am not using any format characters.  This is more the result of copy/paste than any explicit decision on my part.  You should try to be as generic in your test output as possible.  For example, if you are expecting a warning to show in the test results, make sure you do not explicitly check for your local path to the file in the warning output.  This will cause the test to fail for anyone else.

I mentioned earlier that there are three parts to a .php test, but I lied.  There are actually a few more, but they are less commonly used.  I suggest you read through the PHP QA &lt;a href=&quot;http://qa.php.net/write-test.php&quot; target=&quot;_blank&quot;&gt;article&lt;/a&gt; on writing .phpt tests for a full explanation of .phpt test syntax and usage.  I am merely highlighting the major points to get us up and running.

I have noticed that there is a general best practice to naming .phpt test files.  Non bug fix .phpt tests are sequentially numbers starting from 001.  I call these feature tests.  As development continues on a package, new tests are created.  You will notice there are over 100 features tests in pecl/memcache/branches/NON_BLOCKING_IO/tests.  For bug fixes, .phpt tests follow the format of 'pecl{bug #}.phpt'.  This means I would name the .phpt test file for PECL bug #16442 as pecl16442.phpt.

Naturally we want to run the test once it is written.  The php community has provided a tool, called run-tests.php, that runs all or a subset of tests for a given package.  The run-tests.php script is pretty flexible.  You can specify a directory to run all tests in, specify a list of tests to run or specify a single test to run.  Here are some examples:
&lt;code&gt;
# run a single test
TEST_PHP_EXECUTABLE=/usr/local/php/bin/php php run-tests.php tests/pecl16442.phpt

# run a two tests
TEST_PHP_EXECUTABLE=/usr/local/php/bin/php php run-tests.php tests/pecl16442.phpt tests/pecl16536.phpt

# run all tests in the tests/ directory
TEST_PHP_EXECUTABLE=/usr/local/php/bin/php php run-tests.php tests/
&lt;/code&gt;

The syntax of these commands might look a little strange.  The run-tests.php does not try to assume which php executable you want to run the tests against.  Without this variable being set, the script will throw an error that looks like: &quot;&lt;em&gt;ERROR: environment variable TEST_PHP_EXECUTABLE must be set to specify PHP executable!&lt;/em&gt;&quot;.  I am using a bash trick to set the PHP_TEST_EXECUTABLE variable before running each test.  You can also export this variable so it is available each time you run the tests.  If you decide to export it, you should consider adding it to your .bash_profile so you don't have to do it each time you login.  Whichever way you do it, as long as you set this variable before running the run-tests.php script you will be fine.

Running the tests will generate some nicely formatted output.  The output is self-explanatory, so I will not go over it here.  I do want to talk about some interesting things that happen when a test fails.  I changed the &quot;--EXPECT--&quot; portion of my test example to &quot;int(0)&quot;.  If you run this test you will notice it listed in the &quot;FAILED TEST SUMMARY&quot;.  What you don't see is the actual test output or even more importantly &lt;em&gt;why&lt;/em&gt; test failed.  Thankfully, run-tests.php has us covered.  If you look at the output of the tests/ directory you will notice some new files:
&lt;code&gt;
tests/pecl16442.diff # a diff of the expected output and results
tests/pecl16442.exp # the expected output
tests/pecl16442.log # a log of the test run
tests/pecl16442.out # the actual test output
tests/pecl16442.php # the php code used to run the test
&lt;/code&gt;

I find the .out and .php files most useful when debugging code.  When trying to fix a bug I will run the test using run-tests.php once and the continually test against the .php file until I am reasonably sure I have fixed the bug.  I will then use run-tests.php again and see if it passed.  The .out file is useful to see exactly what the test result actually was.  I sometimes use the .diff file when I am head scratching as to why a test I think should have passed is not passing.  Some trivial issues such as newlines and extra spacing can sometimes create a false positive in an otherwise passing test.

After applying the fix to the memcache source code to allow integer values in memcache_set and using run-tests.php to check if the test pecl16442.phpt passes, we need to make sure we run all the tests.  As I mentioned earlier, the existing tests are a there to help prevent regressions in the source code.  One should always check that all tests pass before committing any new code.  I will mention that this can be frustrating when working with a pecl extension that has tests that always seem to fail.  If this is the case, use your best judgement.  You may also want to fix the failing tests before doing any new work on the extension too.

Once all the tests pass, commit your changed source code files and the .phpt test file(s).  Make sure you do not include any of the failed test files that are automatically generated.  If you do not have commit access, include the source code files in the bug report along with the test.  There is nothing any pecl maintainer likes more than having tests included with the patch.
</content>
 </entry>
 
 <entry>
   <title>Building php pecl extensions</title>
   <link href="http://hermanradtke.com/2011/05/07/building-php-pecl-extensions.html"/>
   <updated>2011-05-07T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/05/07/building-php-pecl-extensions</id>
   <content type="html">My &lt;a title=&quot;Working with the PHP source tree&quot; href=&quot;http://www.hermanradtke.com/blog/working-with-the-php-source-tree/&quot; target=&quot;_blank&quot;&gt;last post&lt;/a&gt; I explained how to efficiently checkout the php svn repository.  Now we need to start building pecl extensions and even php itself.  I prefer to use Cent OS for my linux needs and naturally use rpm's to track all my packages.  This means I have a stable version of php installed with all the various extensions that I could want.  Rather than messing with this stable version, I am going to build a custom debug build of php in /usr/local.  I say &quot;debug&quot;, because this build of php will use the --enable-debug option to allow easy debugging using gdb.  Since I am doing pecl extension development, I don't want to build the trunk version of php.  I want to build my pecl extensions against the most recent stable version of php to isolate environmental issues as much as possible.&lt;!--more--&gt;

Now building php from an svn tag is more tricky than building from a snapshot.  The goal is to start building extensions, so rather than waste time navigating the hurdles of building from svn, I will just grab the latest stable version of php from php.net.  Building php becomes very similar to any other program you have compiled from source.

&lt;code&gt;
wget http://www.php.net/get/php-5.3.6.tar.gz/from/this/mirror
tar xzf php-5.3.6.tar.gz
cd php-5.3.6
./configure --prefix=/usr/local/php-5.3.6 --with-config-file-path=/usr/local/php-5.3.6/etc --enable-debug
make
make test #optional
sudo make install
sudo cp php.ini-development /usr/local/php-5.3.6/etc/php.ini
sudo ln -s /usr/local/php-5.3.6 /usr/local/php
&lt;/code&gt;

You will notice that I specified a version specific prefix for php to be installed at.  I do this so I can build multiple versions without clobbering an older build.  However, this makes maintaining any helper scripts a pain as the version continually changes.  To make things easier, I created a symlink so I can specify /usr/local/php for any helper scripts.  You may also want to add /usr/local/php/bin to your PATH in .bash_profile.

Now let's compile the pecl/memcache extesnsion.
&lt;code&gt;
cd php/src/pecl/memcache/trunk
phpize
./configure --enable-debug
make
make test
&lt;/code&gt;

The phpize script is a bash script that bootstraps the environment for the pecl extension based on your installed version of php.  If you have multiple php versions installed, it is very important that you are using the correct phpize script.  I suggest using 'which phpize' to make sure that /usr/local/php/bin/phpize is the script you are using.

Now you will notice that I did not perform a 'make install'.  I generally don't install my extensions while developing with them.  I sometimes bounce back and forth between a few different version of an extension trying to fix various bugs and implement new features.  I prefer to specify the full path to the extension in my php.ini file.  The extension line will look something like this:
&lt;code&gt;
extension=/home/hradtke/projects/php/src/pecl/memcache/trunk/modules/memcache.so
&lt;/code&gt;
Once that line is added you can verify the extension is loaded properly by running 'php -m'.  If you want more detail, you can run 'php -i'.

Now you can start playing with the code.  If you are unsure where to start, I suggest reading these articles:
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://devzone.zend.com/node/view/id/1021&quot; target=&quot;_blank&quot;&gt;Extension Writing Part I: Introduction to PHP and Zend&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://devzone.zend.com/node/view/id/1022&quot; target=&quot;_blank&quot;&gt;Extension Writing Part II: Parameters, Arrays, and ZVALs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://devzone.zend.com/node/view/id/1024&quot; target=&quot;_blank&quot;&gt;Extension Writing Part III: Resources&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.golemon.com/2006/06/what-heck-is-tsrmlscc-anyway.html&quot; target=&quot;_blank&quot;&gt;What the heck is TSRMLS_CC, anyway?&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.phpbuilder.com/manual/en/zend.variables.php&quot; target=&quot;_blank&quot;&gt;Zend API: Hacking the Core of PHP&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://talks.somabo.de/200711_php_code_camp.pdf&quot; target=&quot;_blank&quot;&gt;Extending PHP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
If you get through all that and still want to know more, I suggest purchasing Sara Goleman's book &lt;a href=&quot;http://www.amazon.com/Extending-Embedding-PHP-Sara-Golemon/dp/067232704X&quot; target=&quot;_blank&quot;&gt;Extending and Embedding PHP&lt;/a&gt;.
</content>
 </entry>
 
 <entry>
   <title>Working with the PHP source tree</title>
   <link href="http://hermanradtke.com/2011/05/02/working-with-the-php-source-tree.html"/>
   <updated>2011-05-02T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/05/02/working-with-the-php-source-tree</id>
   <content type="html">The svn repository for PHP is rather large.  Trying to checkout the entire repo is both time consuming and wastes a lot of space.  Most people, including myself, are only concerned with a subset of the repository.  One of the advantages svn has over git is the ability to do partial checkouts of the repository.  I am going to borrow from an old &lt;a title=&quot;svn checkout suggestion&quot; href=&quot;http://www.mail-archive.com/internals@lists.php.net/msg43154.html&quot; target=&quot;_blank&quot;&gt;email&lt;/a&gt; Rasmus sent that details how to do a partial checkout of the PHP source code.&lt;!--more--&gt;I mostly work on pecl/memcache and pecl/gearman and send the occasional patch for a php core extension.  I will ignore any other branches of the PHP svn repository that I am not currently working on.

Here is my checkout process:
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;svn co http://svn.php.net/repository --depth empty src&lt;/strong&gt;
&lt;ul&gt;
	&lt;li&gt;Checkout the intial, empty, repository&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;svn co http://svn.php.net/repository/php http://svn.php.net/repository/pecl --depth immediates src&lt;/strong&gt;
&lt;ul&gt;
	&lt;li&gt;Checkout the immediate files and directories in the php and pecl directories of the repository.  This will checkout empty directories for all the pecl extensions and empty directories for the php modules.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;cd src/php/php-src&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;svn up branches tags --set-depth immediates &lt;/strong&gt;
&lt;ul&gt;
	&lt;li&gt;Checkout empty directories for all branches and tags under php-src.  Any branches or tags created in the future will automatically be created as an empty directory on a future svn update.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;svn up trunk branches/PHP_5_3/ --set-depth infinity&lt;/strong&gt;
&lt;ul&gt;
	&lt;li&gt;Checkout all the source code for trunk and the PHP 5.3 development branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;cd ../../pecl/&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;svn up gearman memcache --set-depth infinity&lt;/strong&gt;
&lt;ul&gt;
	&lt;li&gt;Checkout trunk, branches and tags for the pecl/gearman and pecl/memcache extensions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
The great thing about this approach is that I can show and hide other  parts of the PHP svn repository at will with only a few svn update  commands.  I regularly add an remove other parts of the PHP svn repository at will.  Combined with &lt;a href=&quot;http://lxr.php.net/&quot;&gt;http://lxr.php.net/&lt;/a&gt;, I can quickly find examples and code I am looking for.
</content>
 </entry>
 
 <entry>
   <title>Retrying Failed Gearman Jobs</title>
   <link href="http://hermanradtke.com/2011/04/11/retrying-failed-gearman-jobs.html"/>
   <updated>2011-04-11T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/04/11/retrying-failed-gearman-jobs</id>
   <content type="html">The gearman job queue is great for farming out work.  After reading a great post about &lt;a title=&quot;Gearman and Poison Messages/Jobs&quot; href=&quot;http://endertech.blogspot.com/2009/10/gearman-and-poison-messages-or-jobs.html&quot; target=&quot;_blank&quot;&gt;Poison Jobs&lt;/a&gt;, I limited the number of attempts the gearman daemon will retry a job.  This seemed fairly straight-forward to me: if a job fails, then the gearman daemon will retry the job the specified number of times.  I learned the hard way that it was not that simple.  There is specific criteria the gearman daemon follows in order to retry a job.

&lt;!--more--&gt;

This all came about when I noticed a particular gearman worker was throwing an uncaught exception under certain conditions.  I assumed that an uncaught exception would cause the gearman daemon to retry the job.  I found out that not only did gearman not retry the job, the client was receiving a return code of GEARMAN_SUCCESS.  In other words, the client had no idea the worker was blowing up.

The &lt;a title=&quot;The GearmanJob class&quot; href=&quot;http://no.php.net/manual/en/class.gearmanjob.php&quot; target=&quot;_blank&quot;&gt;GearmanJob&lt;/a&gt; class provides some methods to inform the gearman daemon the result of a job.  They are primarily used for synchronous jobs.  The sendComplete method will cause the gearman daemon to send a return code of GEARMAN_SUCCESS to the client and can also be used to pass data back to the client.  The sendFail method will cause the gearman daemon to send a return code of GEARMAN_WORK_FAIL.  This may seem fairly obvious, but it is important to note that calling sendFail will not cause the job to be automatically retried.  The client code would have to recognize a return code of GEARMAN_WORK_FAIL and decide whether or not to call the job again.

Then there is the sendException method, which will cause the gearman daemon to send a return code of GEARMAN_WORK_EXCEPTION to the client.  Do not make the mistake I did by thinking this will implicitly be called if a worker throws an uncaught exception.  The main difference between sendFail and sendException is that a string detailing the exception can be added to the sendException method.  If you wrap a worker in a try/catch block, you can catch exceptions and call sendException with the exception error message.  The sendFail method does not take any parameters and leaves the client guessing as to why the failure occurred.

The worker does not know if it was called synchronously or not.  If the worker was called synchronously, using any of the aforementioned methods will allow the client to determine the status of the job.  The client can then decide whether or not to retry a failed job.  If the worker was called asynchronously, sending back the job status falls on deaf ears.  Nothing is listening for the job status and the gearman daemon will not log failed jobs.

We still have no idea what criteria must be met in order for the gearman daemon to retry a job.  I read some gearman mailing lists and perused the daemon source code and I think I have found a definitive answer.  The worker must exit with a non-zero code during a job in order for the gearman daemon to retry the job.  The strange thing is that an uncaught exception causes a php script to exit with a code of 255.  Explicitly calling exit(255) will force a retry, but an uncaught exception will definitely not force a retry.  In fact, an uncaught exception will not even cause a GEARMAN_WORK_FAIL or GEARMAN_WORK_EXCEPTION return code.

After some reviewing of the pecl/gearman code, I have found that the pecl/gearman worker code is not checking for an exception before returning GEARMAN_SUCCESS.  I have submitted a &lt;a title=&quot;Bug #22636 	Uncaught worker exception sends back GEARMAN_SUCCESS return code.&quot; href=&quot;http://pecl.php.net/bugs/bug.php?id=22636&quot; target=&quot;_blank&quot;&gt;bug report&lt;/a&gt; with a patch to at least return GEARMAN_WORK_FAIL when an exception is enountered instead of GEARMAN_SUCCESS.  I do think there is an argument to be made that an uncaught exception should force a retry of the job, but I will leave that discussion for another day.

The best way to force a job retry on an uncaught exception is to simply use the exit() function.

&lt;pre lang=&quot;php&quot;&gt;
function func($job)
{
    try {
        // work
    } catch (Exception $e)
        syslog(LOG_ERR, $e);
        exit(255);
    }
}
&lt;/pre&gt;

This will cause your worker to stop running, but so will an uncaught exception.  Most gearman architectures have a monitor that will restart fallen workers.  If you don't, get one and have it send out alerts if any worker exists with a status of non-zero.
</content>
 </entry>
 
 <entry>
   <title>PECL memcache 3.0.6 released</title>
   <link href="http://hermanradtke.com/2011/04/10/pecl-memcache-3-0-6-released.html"/>
   <updated>2011-04-10T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/04/10/pecl-memcache-3-0-6-released</id>
   <content type="html">I just released &lt;a href=&quot;http://pecl.php.net/package/memcache&quot;&gt;pecl/memcache&lt;/a&gt; version &lt;a href=&quot;http://pecl.php.net/get/memcache-3.0.6.tgz&quot;&gt;3.0.6&lt;/a&gt; in PECL.  This is another set of changes to try and stabilize the new 3.0.x version.  Please view the &lt;a href=&quot;http://pecl.php.net/package-changelog.php?package=memcache&amp;amp;release=3.0.6&quot;&gt;ChangeLog&lt;/a&gt; for a list of bug fixes.
</content>
 </entry>
 
 <entry>
   <title>PIL not recognizing libjpeg support</title>
   <link href="http://hermanradtke.com/2011/03/09/pil-not-recognizing-libjpeg-support.html"/>
   <updated>2011-03-09T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2011/03/09/pil-not-recognizing-libjpeg-support</id>
   <content type="html">PIL is python's imaging library.  I use this library when doing any sort of image processing.  Recently I had to install PIL on a new Cent OS 5 server.  I think pythons module installation process is awesome and almost never have problems. However, this particluar version of PIL 1.1.7 was giving me some problems with libjpeg. The libjpeg rpm was installed, but PIL was not getting built with libjpeg support.  This was very confusing to me because the setup summary said it jpeg support was available and the selftest.py script passed all the tests.  &lt;!--more--&gt;

After fishing around for a while I noticed the following warning during the build process:

&lt;code&gt;/usr/bin/ld: skipping incompatible /usr/lib/libjpeg.so when searching for -ljpeg&lt;/code&gt;

The gcc line responsible for that warning had the following flags for linking:
&lt;code&gt;-L/usr/lib -L/usr/lib64 -ljpeg&lt;/code&gt;

I am working on a 64bit system and apparently the linker was trying to link a 32bit libjpeg shared object instead of the 64bit one.  I copied the gcc statement, removed &quot;-L/usr/lib&quot; from it and manually compiled the _imaging.so file.  I had to then manually install (copy) the _imaging.so file into the to /usr/lib64/python/site-packages/PIL after that.  This finally solved the problem.
</content>
 </entry>
 
 <entry>
   <title>Bootstrapping PHPUnit tests</title>
   <link href="http://hermanradtke.com/2010/12/11/bootstrapping-phpunit-tests.html"/>
   <updated>2010-12-11T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/12/11/bootstrapping-phpunit-tests</id>
   <content type="html">I just recently stumbled upon PHPUnit's --bootstrap flag.  I used to bootstrap each of my unit tests using a require statement at the top of the file.  I always found this very tedious, but did not want to write some script to wrap each unit test.  The --bootstrap flag solves this problem quite nicely.&lt;!--more--&gt;

My unit tests used to look something like this:
&lt;pre lang=&quot;php&quot;&gt;require_once dirname(__FILE__) . '/../TestHelper.php';

class FooTest extends \PHPUnit_Framework_TestCase { ... }
&lt;/pre&gt;
This allowed me to run the tests as part of a suite or run them individually.  This worked fine, but it was annoying to always have to make sure the require_once statement was correct.  As I create tests in sub-directories I would often forget this.  I can now remove the require statement and run the unit test with the following command:
&lt;pre lang=&quot;bash&quot;&gt;phpunit --bootstrap TestHelper.php crimsontest/FooTest.php
&lt;/pre&gt;
I create a runtests.sh script so I don't have to manually type the phpunit command plus the required flag:
&lt;pre lang=&quot;bash&quot;&gt;#!/bin/bash
DIR=`dirname $0`
phpunit --bootstrap $DIR/TestHelper.php $DIR/crimsontest/AllTests.php
&lt;/pre&gt;
I already updated all the unit tests in the &lt;a href=&quot;https://github.com/hradtke/crimson&quot; target=&quot;_blank&quot;&gt;Crimson&lt;/a&gt; framework to use a the bootstrap strategy.
</content>
 </entry>
 
 <entry>
   <title>Stop Inverted Reuse</title>
   <link href="http://hermanradtke.com/2010/12/06/stop-inverted-reuse.html"/>
   <updated>2010-12-06T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/12/06/stop-inverted-reuse</id>
   <content type="html">Reuse is a term often used amongst developers.  It usually carries with  it a positive connotation and a developer writing reusable code is seen  as a good thing.  I think there are a lot of developers who have a completely different understanding of what code reuse means.  When I talk about code reuse, I am talking about reusing logic within the code.  Based on code reviews, it  seems the most common definition of reuse is: anytime a function or  method is used by two or more callers.  This definition fails to realize  the true meaning of reuse and can lead to problems.  In the name of  &quot;reuse&quot;, I have noticed some developers group common code at the application  level by creating functions or methods that solve some pseudo-generic  problem.  I call this type or reuse &lt;em&gt;inverted reuse&lt;/em&gt;.&lt;!--more--&gt;

Inverted  reuse, while initially attractive, often causes a maintenance  nightmare.  A developer notices that they are repeating some common logic over and over (probably through copy and pasting) while writing  some application code and decides to make a common method.  While  preventing copy/paste code is good, it should not be done at the cost of  extensibility and code clarity.  The easiest way to see inverted reuse  is by example.  Consider the following:
&lt;pre lang=&quot;php&quot;&gt;class Member
{
    public function create(array $params)
    {
        $input = $this-&gt;_filter($params, 'create');
        if (!$input) {
            return false;
        }

        // create new member

        return true;
    }

    public function update(array $params)
    {
        $input = $this-&gt;_filter($params, 'update');
        if (!$input) {
            return false;
        }

        // update existing member

        return true;
    }

    protected function _filter(array $params, $context)
    {
        $def = array(
            'email' =&gt; FILTER_VALIDATE_EMAIL,
            'password' =&gt; FILTER_SANITIZE_STRING,
            'name' =&gt; FILTER_SANITIZE_STRING,
        );

        if ($context == 'update') {
            $def['id'] = FILTER_VALIDATE_INT;
        }

        $input = filter_var_array($params, $def);

        // name is optional
        if (!$input['email'] || !$input['password']) {
            return false;
        }

        if ($context == 'update') {
            if (!$input['id']) {
                return false;
            }
        }

        return $input;
    }
}
&lt;/pre&gt;
The use of the  protected _filter method is a classic example of inverted reuse.  The  email, password and name parameters are common to both the create and update  public methods.  However, the update method needs an additional parameter,  called id, to determine what member to update.  It is quite obvious that the  more parameters the _filter method has to filter, the more complicated  the method becomes.  Some parameters may be only applicable to the create method as well, such as  Google Analytics values.  There are a couple solutions to this particular case of inverted reuse.   One approach would be to only use the _filter method for the common  parameters and to have each public method filter and validate the unique  parameters.  I think this fix still misses the real point of reuse.   The _filter method really does two things: uses filter_input_array and  determines which parameters are required.  This same logic is probably going to be required all over the code.  Consider the following:
&lt;pre lang=&quot;php&quot;&gt;class Member
{
    public function create(array $params)
    {
        $def = array(
            'email' =&gt; FILTER_VALIDATE_EMAIL,
            'password' =&gt; FILTER_SANITIZE_STRING,
            'name' =&gt; FILTER_SANITIZE_STRING,
        );

        $optional = array('name');

        $f = new Filter;
        $input = $f-&gt;filterInput($params, $def, $optional);
        if (!$input) {
            return false;
        }

        // create new member

        return true;
    }

    public function update(array $params)
    {
        $def = array(
            'email' =&gt; FILTER_VALIDATE_EMAIL,
            'password' =&gt; FILTER_SANITIZE_STRING,
            'name' =&gt; FILTER_SANITIZE_STRING,
            'id' =&gt; FILTER_VALIDATE_INT,
        );

        $optional = array('name');

        $f = new Filter;
        $input = $f-&gt;filterInput($params, $def, $optional);
        if (!$input) {
            return false;
        }

        // update existing member

        return true;
    }
}
&lt;/pre&gt;
I am not going to define the Filter class as it really  does not matter how it gets implemented.  There are a number of benefits to moving the logic in the _filter method into a separate class.  Putting this class at the  library level allows the entire application to use it.  It is also much  easier to unit test this class as it does one thing and it does that thing  abstractly.  We can also extend, wrap or compose this class if there is  the need.  This is a truly object oriented approach to solving the  filter problem.

You might notice that both public methods look very similar.  The  $def array is only slightly different in the update method, the  $optional array is exactly the same and the use of the Filter class is  identical.  This is completely fine.   We are reusing the same business  logic inside the Filter class and that is what code reuse is all about.   Each public method's intention is clearly defined this way too.  The  context (create or update) required for filtering is implicit.  Contrast  this with the _filter method which required an explicit context to be  passed around.  I would argue that using an implicit context not only  makes the code easier to understand, it also reduces the chance of  causing bugs.
</content>
 </entry>
 
 <entry>
   <title>Updating PHP Documentation</title>
   <link href="http://hermanradtke.com/2010/12/05/updating-php-documentation.html"/>
   <updated>2010-12-05T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/12/05/updating-php-documentation</id>
   <content type="html">I sometimes help update the PHP documentation.  I have not done it in a while since I started maintaining &lt;a href=&quot;http://pecl.php.net/package/memcache&quot; target=&quot;_blank&quot;&gt;pecl/memcache&lt;/a&gt;.  However, there was a recent &lt;a href=&quot;http://pecl.php.net/bugs/bug.php?id=20375&quot; target=&quot;_blank&quot;&gt;bug submission&lt;/a&gt; where I felt the documentation for pecl/memcache should be updated.  A lot of work has been done to the documentation tools since I last updated documentation.  I went to &lt;a href=&quot;http://doc.php.net&quot; target=&quot;_blank&quot;&gt;http://doc.php.net&lt;/a&gt; for a quick primer on how to generate some new documentation output so I could test my changes and found the documentation for generating documentation a little hard to follow.&lt;!--more--&gt;

PHP documentation generation is done in two steps.  First, you need to generate the docbook file.  You somehow have to find this page &lt;a href=&quot;http://pecl.php.net/bugs/bug.php?id=20375&quot; target=&quot;_blank&quot;&gt;http://doc.php.net/php/dochowto/chapter-configure.php&lt;/a&gt; that explains how.  Once the docbook file, normally called manual.xml, is generated you have to actually generate the documentation output.  I found the PhD manual here: &lt;a href=&quot;http://doc.php.net/phd/docs&quot; target=&quot;_blank&quot;&gt;http://doc.php.net/phd/docs&lt;/a&gt;.  PhD can create a number of different documentation formats from the docbook file.  I normally just use the xhtml output and serve the page up on my local web-server to verify my changes.  I found section on rendering to be a little hard to follow.  Here are the steps I used to update the content on the &lt;a href=&quot;http://www.php.net/manual/en/memcache.getextendedstats.php&quot; target=&quot;_blank&quot;&gt;Memcache:getExtendedStats&lt;/a&gt; page:
&lt;pre lang=&quot;bash&quot;&gt;sudo pear install doc.php.net/phd-beta

# use a sparse SVN checkout so all the languages and
# the tags and branches directories are skipped
svn co http://svn.php.net/repository/phpdoc --depth empty phpdoc

# checkout the documentation toolset
svn update phpdoc/doc-base --set-depth empty
svn update phpdoc/doc-base/trunk --set-depth infinity

# checkout the english version of the documentation
svn update phpdoc/en --set-depth empty
svn update phpdoc/en/trunk --set-depth infinity

cd phpdoc
vim en/trunk/reference/memcache/memcache/getextendedstats.xml

# generate the docbook file
# disable libxml check as Cent OS 5.5 does not have LibXML version 2.7.4
# put the docbook file in the root phpdoc directory
php doc-base/trunk/configure.php --output=manual.xml --disable-libxml-check

# generate xhtml output in the output/ directory
phd -d manual.xml -f xhtml
&lt;/pre&gt;
Note: you can safely ignore the E_USER_WARNING about &quot;Image does not exist&quot; when generating the output.
</content>
 </entry>
 
 <entry>
   <title>PHP and apache install errors</title>
   <link href="http://hermanradtke.com/2010/11/28/php-and-apache-install-errors.html"/>
   <updated>2010-11-28T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/11/28/php-and-apache-install-errors</id>
   <content type="html">I compile a few different versions of PHP on my development server.   Every once in a while I run into a problem with PHP installing correctly with apache.

The error looks something like this:
&lt;blockquote&gt;Installing PHP SAPI module: apache2handler
/usr/local/apache2/build/instdso.sh SH_LIBTOOL='/usr/local/apache2/build/libtool' libphp5.la /usr/local/apache2/modules
/usr/local/apache2/build/libtool --mode=install cp libphp5.la /usr/local/apache2/modules/
cp .libs/libphp5.lai /usr/local/apache2/modules/libphp5.la
cp .libs/libphp5.a /usr/local/apache2/modules/libphp5.a
ranlib /usr/local/apache2/modules/libphp5.a
chmod 644 /usr/local/apache2/modules/libphp5.a
libtool: install: warning: remember to run `libtool --finish /home/flumpy/temp/php-5.0.2/libs'
Warning! dlname not found in /usr/local/apache2/modules/libphp5.la.
Assuming installing a .so rather than a libtool archive.
chmod 755 /usr/local/apache2/modules/libphp5.so
chmod: cannot access `/usr/local/apache2/modules/libphp5.so': No such file or directory
apxs:Error: Command failed with rc=65536
.
make: *** [install-sapi] Error 1&lt;/blockquote&gt;
I immediately start googling for a solution to this problem and get caught up in the symptoms.  The real problem is that there is a typo in the configure line.  In my most recent case, I had a '-' instead of a '--'.
</content>
 </entry>
 
 <entry>
   <title>PHP core is out of control</title>
   <link href="http://hermanradtke.com/2010/11/23/php-core-is-out-of-control.html"/>
   <updated>2010-11-23T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/11/23/php-core-is-out-of-control</id>
   <content type="html">The current state of PHP is pretty chaotic.  While there are plenty of people involved the development and maintenance of PHP, there is no leadership and little direction.  Most developers are isolated from one another developing whatever they feel like developing.  The lack of strong leadership allows for little improvement in the way PHP is developed and used.

Things get done in open-source projects when people have the need to scratch an itch.  In order to facilitate more activity within PHP core, trunk we opened for general development.  However, that does not mean every itch that is scratched should be added to PHP.  PHP just added lahmda functions and namespaces in 5.3 and now we have traits, strict typing and maybe even annotations in 5.4.  Namespaces have not even seen serious adoption yet.  There are a ton of open bugs yet to be fixed.  Most people don't find bugs as enjoyable to work on as new features, but this work needs to be done.

The lack of leadership and standards is driving myself, and many others, nuts.  A lot of important decisions appear to be made behind closed doors.  Some veteran core developers seem to make arbitrary decisions about things that affect a lot of people.  All of this is allowed to happen because there are very few meaningful standards in the PHP development process.  Only recently have there been RFC's written for major projects.  Real and transparent standards need to be written for the development process too.

I realize that PHP is an open-source project that is community driven.  Anyone volunteering there time does not want to spend it dealing with politics.  However, the politics are unavoidable.  I rely on PHP for my job and I try to contribute back as much as I can.  However, if PHP maintains its present course, maybe I will invest my time and effort into another language, like Python.
</content>
 </entry>
 
 <entry>
   <title>PECL memcache 2.2.6 and 3.0.5 released</title>
   <link href="http://hermanradtke.com/2010/10/03/pecl-memcache-2-2-6-and-3-0-5-released.html"/>
   <updated>2010-10-03T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/10/03/pecl-memcache-2-2-6-and-3-0-5-released</id>
   <content type="html">I just released &lt;a href=&quot;http://pecl.php.net/package/memcache&quot;&gt;memcache&lt;/a&gt; versions &lt;a href=&quot;http://pecl.php.net/get/memcache-2.2.6.tgz&quot;&gt;2.2.6&lt;/a&gt; and &lt;a href=&quot;http://pecl.php.net/get/memcache-3.0.5.tgz&quot;&gt;3.0.5&lt;/a&gt; in PECL.  The 3.0.5 release fixed the delete weight bug that prevented people from upgrading to the latest version of the memcached daemon.  I know this was a major issue for many shops and I hope it will allow people to continue to use the 3.0.x branch as we try to finish the non-blocking i/o changes.

These two releases are my first releases as part of the development team working on PECL memcache and the first releases in almost 20 months.  I took over, along with Pierre-Alain Joye, when Antony Dovgal and Mikael Johansson went inactive back in March 2010.  As luck would have it, I suddenly became busy myself.  Inheriting a project, especially one that is half-done, takes quite a bit of time to get comfortable with.  The 7 months since I have started have flown by and I wish I had gotten more done.  Now that some critical bug fixes are out of the way, I hope to focus more on the non-blocking i/o branch development.

Pierre and I are working on a roadmap that focuses on getting much of the 3.0.x code into a stable state.  The 2.2.x branch will probably not see any new development, but will continue to be maintained with bug fixes.
</content>
 </entry>
 
 <entry>
   <title>Crimson Framework Updated to PHP 5.3</title>
   <link href="http://hermanradtke.com/2010/09/23/crimson-framework-updated-to-php-5-3.html"/>
   <updated>2010-09-23T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/09/23/crimson-framework-updated-to-php-5-3</id>
   <content type="html">I have updated my &lt;a href=&quot;http://github.com/hradtke/crimson&quot;&gt;Crimson&lt;/a&gt; framework to use PHP 5.3 namespace support instead of the old PEAR style class namespacing.  I did this primarily as an exercise in migrating a code-base to use namespaces.  Just in case anyone was relying on the old framework code, there is a pre-5.3 branch on github.&lt;!--more--&gt;

Along the way I decided to deviate from the separate component structure and merge all components into a single framework structure.  It is still my goal to keep dependencies within the framework to a minimum, but I felt the extra work required to maintain each component separately was not worth it.  This was especially the case for the unit tests.  Each component required a considerable amount of boilerplate code to bootstrap and run the tests.  I was able to reduce the amount of boilerplate considerably by merging the tests into one suite.  I have been following the developments of Zend Framework 2.0 to see what major changes they are making.  I think the large overhaul to the ZF2 tests section was a significant influence on my decision to do some overhaul myself.

I have also added some additional features to the framework that I will be talking about in a later post.
</content>
 </entry>
 
 <entry>
   <title>The Bug Is In Your Code</title>
   <link href="http://hermanradtke.com/2010/07/05/the-bug-is-in-your-code.html"/>
   <updated>2010-07-05T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/07/05/the-bug-is-in-your-code</id>
   <content type="html">I stumbled across this while reading some tweets: &lt;a href=&quot;http://bugs.php.net/bug.php?id=52198&quot;&gt;http://bugs.php.net/bug.php?id=52198&lt;/a&gt;.  This reminded me of something I was told while attending a programming workshop at college: over 90% of the time the bug is in your code.  At the time I didn't think about this much as I had been writing code for only about 6 months and assumed the third party libraries I was using were bug free.  As I continue to grow as a developer and engineer, I am amazed at the number of developers immediately blaming the library or framework they are using for a bug in their project.  Bugs do exist in all code, but it is more likely that the bug is in your code.
</content>
 </entry>
 
 <entry>
   <title>Learning To Use MongoDB</title>
   <link href="http://hermanradtke.com/2010/07/05/learning-to-use-mongodb.html"/>
   <updated>2010-07-05T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/07/05/learning-to-use-mongodb</id>
   <content type="html">I have heard of &lt;a class=&quot;zem_slink&quot; title=&quot;MongoDB&quot; rel=&quot;homepage&quot; href=&quot;http://www.mongodb.org/display/DOCS/Home&quot;&gt;MongoDB&lt;/a&gt; for some time and have read quite a few articles and attended some conference seminars about it.  I had put off using MongoDB because I could find no project that really made good use of it.  About two weeks ago I started a project that doesn't really fit into the &lt;a class=&quot;zem_slink&quot; title=&quot;Relational database&quot; rel=&quot;wikipedia&quot; href=&quot;http://en.wikipedia.org/wiki/Relational_database&quot;&gt;relational database&lt;/a&gt; mold.  I finally had the perfect excuse to devote the time and effort to learning all about MongoDB and take my place among the ranks of developers using &lt;a class=&quot;zem_slink&quot; title=&quot;NoSQL&quot; rel=&quot;wikipedia&quot; href=&quot;http://en.wikipedia.org/wiki/NoSQL&quot;&gt;NoSQL&lt;/a&gt; (whatever that means).

&lt;!--more--&gt;

The packages provided by &lt;a title=&quot;10gen&quot; rel=&quot;homepage&quot; href=&quot;http://www.10gen.com/&quot;&gt;10gen&lt;/a&gt; were easy to find and there  were no  problems installing them on my &lt;a title=&quot;Ubuntu (operating system)&quot; rel=&quot;homepage&quot; href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; laptop.  Rather than searching the web for introductions to MongoDB, I decided to learn it from &lt;a class=&quot;zem_slink&quot; title=&quot;10gen&quot; rel=&quot;homepage&quot; href=&quot;http://www.10gen.com/&quot;&gt;10gen&lt;/a&gt; (the company who developed MongoDB).  I purchased the rough cut of &lt;a href=&quot;http://oreilly.com/catalog/9781449389536/&quot; target=&quot;_blank&quot;&gt;MongoDB: The Definitive Guide from O'Reilly Safari&lt;/a&gt;.  This was the first time I have purchased a rough cut book and so far I have no complaints.  I opted for the e-book version so I could get up a running right away (I am also running out of bookshelf space).  I am 3 chapters in and so far I have no complaints.  I am concerned that the ubiquitous use of documents may cause a square peg/round hole issue, but so far I have no run into any problems.  The use of a &lt;a class=&quot;zem_slink&quot; title=&quot;JSON&quot; rel=&quot;homepage&quot; href=&quot;http://json.org&quot;&gt;JSON&lt;/a&gt; super-set makes the syntax feel very natural to me and is a huge plus in my opinion.

I will post my thoughts and experiences here as the project progresses and I learn more about MongoDB.  I love learning new things and so far MongoDB has not disappointed.
&lt;div class=&quot;zemanta-pixie&quot; style=&quot;margin-top: 10px; height: 15px;&quot;&gt;&lt;a class=&quot;zemanta-pixie-a&quot; title=&quot;Enhanced by Zemanta&quot; href=&quot;http://www.zemanta.com/&quot;&gt;&lt;img class=&quot;zemanta-pixie-img&quot; style=&quot;border: medium none; float: right;&quot; src=&quot;http://img.zemanta.com/zemified_e.png?x-id=7e58f774-e5d3-478d-969e-eb458875c697&quot; alt=&quot;Enhanced by Zemanta&quot; /&gt;&lt;/a&gt;&lt;span class=&quot;zem-script more-related pretty-attribution&quot;&gt;&lt;script src=&quot;http://static.zemanta.com/readside/loader.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;/span&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Don't Overuse Use</title>
   <link href="http://hermanradtke.com/2010/04/19/dont-overuse-use.html"/>
   <updated>2010-04-19T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/04/19/dont-overuse-use</id>
   <content type="html">Nate Abele just announced &lt;a href=&quot;http://rad-dev.org/lithium/wiki/blog/Lithium-0-9-The-Lambdas-are-awesome-Edition&quot;&gt;Lithium 0.9&lt;/a&gt; on the rad-dev blog.  I think Lithium is a great looking framework and can't wait for it to get a 1.0 release and really start to take off.  However, looking through the examples I started to notice that the use of the &quot;use&quot; namespace keyword was an often used convention.  It reminded me of the require/require_once creep of the days of old.  I was discussing it with Nate via Twitter, but I couldn't seem to get my point across.  Maybe I will have better luck here...

&lt;!--more--&gt;Before PHP  went OO and autoloading existed, users had little choice but to place require_once statements throughout their code to satisfy the application dependencies.  At the start of a project this was fine as the dependencies were thoughtfully mapped out and the require_once statements strategically placed.  However, as time goes on and code goes through maintenance the require_once creep starts to set in.

What do I mean by require_once creep?  I simply mean that there are require_once statements including code that doesn't need to be included.  This caused a couple of problems:
&lt;ol&gt;
	&lt;li&gt;More code for the PHP parser to parse and thus a slower application&lt;/li&gt;
	&lt;li&gt;Confusing code dependencies&lt;/li&gt;
&lt;/ol&gt;
Now, admittedly problem 2 is not the major issue problem 1 is.  However, nothing is more frustrating than removing a innocuous require_once from a file only to have some other random file break because it was including that file and depending on that require_once.  There is an entire PHP extension dedicated to helping people solve this very problem: &lt;a href=&quot;http://us.php.net/inclued&quot;&gt;inclued&lt;/a&gt;.  I still remember Mozilla's conference talk about refactoring TikiWiki to not simply include every nearly every single library file on every single page.

To fix this problem, autoloading was introduced.  This allowed people to stop using require_once and spawned a method of pseudo-namespacing files.  One of the more popular methods of psuedo-namespacing was the PEAR standard.  This standard said to name the class based on the directory location of the class.  So if I have class in herman/awesome/Solution.php I would name the class Herman_Awesome_Solution.  This obviously gave rise to some pretty long class names, but people generally loved it as it saved them from require_once creep.

Let's fast forward to PHP 5.3.  The &quot;use&quot; keyword is introduced to let users alias long namespaces to a shorter name.  So I can reference the namespace \this\is\a\really\long\namespace as longns.  This is great, now I can reference a really long namespace with a single word.  All I have to do is remember to alias it.  And the aliases are descending, so if I alias a class that alias two other classes, I can use those additional aliases free of charge.

But wait, doesn't it seem like we just went full circle with naming conventions?  We started with simple class names with require_once creep, graduated to autoloading and using super long class names and are now back using simple class names with use creep.  The use creep doesn't have the performance halting side effects of require_once, but it sure seems like it can cause quite a dependency maintenance nightmare.  It may be no problem for you, but what about the guy coding next to you who really doesn't care?

I think I will stick to using the fully qualified namespace (FQN) of a class.  It will take a few more keystrokes, but it keep my dependencies cleaner.
</content>
 </entry>
 
 <entry>
   <title>Using Absolute URL's In The View</title>
   <link href="http://hermanradtke.com/2010/03/20/using-absolute-urls-in-the-view.html"/>
   <updated>2010-03-20T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/03/20/using-absolute-urls-in-the-view</id>
   <content type="html">We recently had a project at work that involved replacing all the relative URL's from the application with absolute URL's.  In the past, developers had just hard-coded an absolute URL only when they need to force the browser over to https.  Now we are using multiple subdomains, so this approach is no longer sufficient.  We also wanted a way to easy rotate assets through multiple CDN URL's to speed up the time it takes a user's web browser to load all the content.
&lt;!--more--&gt;
There are two requirements:
&lt;ol&gt;
	&lt;li&gt;Prefix a relative url path with a host.&lt;/li&gt;
	&lt;li&gt;Rotate a set of relative url's through a given number of cdn hosts.&lt;/li&gt;
&lt;/ol&gt;
We currently use Zend Framework at work, so it is only logical we use as much of the framework as possible.&amp;nbsp; The straight forward approach is to extend Zend_View_Helper_Abstract and create a few functions to fill the requirements.&amp;nbsp; There are few problems with this approach.&amp;nbsp; The first is function creep.&amp;nbsp; We know we need to prefix http://www.hautelook.com and https://www.hautelook.com, but there may be more later.&amp;nbsp; We may decide to use something like https://ssl.hautelook.com or require another subdomain like http://ftp.hautelook.com.&amp;nbsp; This would require us to create another function, write some unit tests for it and finally send it through QA.&amp;nbsp; This issue is even more compounded with the cdn rotation function.

Another problem is that we need absolute url's in some of our business logic.&amp;nbsp; We have webservices that serve up XML or JSON that contain locations to such as images or a catalog.&amp;nbsp; We want these services to take advantage of the absolute url logic too.&amp;nbsp; If we implement a view helper, then the service layer becomes coupled to the view in order to reuse the logic.

Enter PHP 5.3, &lt;a class=&quot;zem_slink&quot; href=&quot;http://en.wikipedia.org/wiki/Functional_programming&quot; title=&quot;Functional programming&quot; rel=&quot;wikipedia&quot;&gt;functional programming&lt;/a&gt; and an inspirational post from &lt;a href=&quot;http://eliw.wordpress.com/2010/03/10/an-intriguing-use-of-lambda-functions/&quot;&gt;Eli White&lt;/a&gt;.&amp;nbsp; We can use the &lt;a class=&quot;zem_slink&quot; href=&quot;http://en.wikipedia.org/wiki/Factory_method_pattern&quot; title=&quot;Factory method pattern&quot; rel=&quot;wikipedia&quot;&gt;factory method&lt;/a&gt; pattern and closures to meet all the requirements and isolate the parts that change.&amp;nbsp; Read &lt;a href=&quot;http://www.hermanradtke.com/blog/php-goes-functional-in-version-5-3/&quot;&gt;these&lt;/a&gt; &lt;a href=&quot;http://www.hermanradtke.com/blog/php-5-3-is-the-new-javascript-almost/&quot;&gt;posts&lt;/a&gt; if you are not familiar with functional programming in PHP.

&lt;pre lang=&quot;php&quot;&gt;
class Crimson_Url
{
    public static function absolute($host)
    {
        return function($path) use ($host) {
            return &quot;{$host}{$path}&quot;;
        };
    }

    public static function rotate($subdomain, $host, $rotations, $protocol='http')
    {
        $current = 0;

        return function($path) use (&amp;$current, $subdomain, $host, $rotations, $protocol) {
            if ($current == $rotations) {
                $current = 1;
            } else {
                $current++;
            }

            return &quot;{$protocol}://{$subdomain}{$current}.{$host}{$path}&quot;;
        };
    }
}
&lt;/pre&gt;

The absolute function demonstrates how simple, yet powerful, closures can be.&amp;nbsp; The absolute function is creating a function that concatenates to strings together: a host name and a relative url.&amp;nbsp; Here is how we would use this:

&lt;pre lang=&quot;php&quot;&gt;$www = Crimson_Url::absolute('http://www.example.com');
$ssl = Crimson_Url::absolute('https://www.example.com');

echo $www('/foo.jpg'), PHP_EOL;
echo $ssl('/secure.php'), PHP_EOL;
&lt;/pre&gt;
Output:
&lt;pre&gt;http://www.example.com/items.php
https://www.example.com/secure.php
&lt;/pre&gt;
Take this one step further and think about how you can use the HTTP_HOST or HTTP_REFERER values from $_SERVER to make absolute URL generation almost completely automatic.

The rotate function is slightly more complex.&amp;nbsp; The $current variable is being declared in the factory method and passed by reference.&amp;nbsp; We must explicitly pass this by reference otherwise PHP will pass it by value and the value of $current will be 1 everytime.&amp;nbsp; Here is how we would use the rotater:

&lt;pre lang=&quot;php&quot;&gt;$cdn = Crimson_Url::rotate('cdn', 'hautelook.com', 3);
$sslCdn = Crimson_Url::rotate('cdn', 'hautelook.com', 3, 'https');

echo $cdn('/foo.jpg'), PHP_EOL;
echo $cdn('/bar.jpg'), PHP_EOL;
echo $cdn('/baz.jpg'), PHP_EOL;
echo $cdn('/bob.jpg'), PHP_EOL;

echo $sslCdn('/foo.jpg'), PHP_EOL;
echo $sslCdn('/bar.jpg'), PHP_EOL;
&lt;/pre&gt;
Output:
&lt;pre&gt;http://cdn1.hautelook.com/foo.jpg
http://cdn2.hautelook.com/bar.jpg
http://cdn3.hautelook.com/baz.jpg
http://cdn1.hautelook.com/bob.jpg
https://cdn1.hautelook.com/foo.jpg
https://cdn2.hautelook.com/bar.jpg
&lt;/pre&gt;
Notice how there are no problems with static variable conflicts.  Each function is independent and can be used for completely different tasks.

The complete source code, with tests and documentation, can be found here: &lt;a href=&quot;http://github.com/hradtke/crimson/tree/master/Crimson_Url&quot;&gt;http://github.com/hradtke/crimson/tree/master/Crimson_Url&lt;/a&gt;&lt;/pre&gt;

&lt;div style=&quot;margin-top: 10px; height: 15px;&quot; class=&quot;zemanta-pixie&quot;&gt;&lt;a class=&quot;zemanta-pixie-a&quot; href=&quot;http://reblog.zemanta.com/zemified/b602316b-6c98-4996-aba2-9daac249577a/&quot; title=&quot;Reblog this post [with Zemanta]&quot;&gt;&lt;img style=&quot;border: medium none; float: right;&quot; class=&quot;zemanta-pixie-img&quot; src=&quot;http://img.zemanta.com/reblog_e.png?x-id=b602316b-6c98-4996-aba2-9daac249577a&quot; alt=&quot;Reblog this post [with Zemanta]&quot;&gt;&lt;/a&gt;&lt;span class=&quot;zem-script more-related pretty-attribution&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://static.zemanta.com/readside/loader.js&quot; defer=&quot;defer&quot;&gt;&lt;/script&gt;&lt;/span&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>PHP 5.3 is the new JavaScript (almost)</title>
   <link href="http://hermanradtke.com/2010/03/15/php-5-3-is-the-new-javascript-almost.html"/>
   <updated>2010-03-15T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/03/15/php-5-3-is-the-new-javascript-almost</id>
   <content type="html">In my last post, I argued that the best way to start developing functional PHP applications was to code review some JavaScript projects.   I think this is a good place to start as most web developers have written some JavaScript at one point during their career.  I briefly mentioned that the array is pretty similar to the JavaScript object too.   However, if you start hacking away at PHP based on JavaScript's functional syntax, you will quickly run into some problems.

&lt;!--more--&gt;One major difference between PHP and JavaScript style closures.  Here is a typical JavaScript closure:
&lt;pre lang=&quot;javascript&quot;&gt;
// start counting from some number
function counter(n) {
    return function() {
        return n++;
    }
}

countFrom3 = counter(3);
console.log(countFrom3());
console.log(countFrom3());
console.log(countFrom3());
console.log(countFrom3());
&lt;/pre&gt;

We can write this same function in PHP.  The main difference is the &quot;use&quot; identifier required for closure:
&lt;pre lang=&quot;php&quot;&gt;
&lt;?php
function counter($n) {
    return function() use($n) {
        return $n++;
    };
}

$countFrom3 = counter(3);
echo $countFrom3(), PHP_EOL;
echo $countFrom3(), PHP_EOL;
echo $countFrom3(), PHP_EOL;
echo $countFrom3(), PHP_EOL;
&lt;/pre&gt;

If you run this code, it will not work as expected: every number will be 3.  Why?  Well, the closure RFC for PHP requires that variables are only explicitly passed by reference.  That means we need to use modify the function signature:
&lt;pre lang=&quot;php&quot;&gt;
&lt;?php
function counter($n) {
    return function() use(&amp;$n) { // &lt;--- note the pass by reference syntax
        return $n++;
    };
}
&lt;/pre&gt;

Now JavaScript does not have traditional classes like PHP.  Instead, we define an object with a set of variables.  Object methods are simply variables that reference an anonymous function.  Something like this:

&lt;pre lang=&quot;javascript&quot;&gt;
obj = {};
obj.add = function(l, r) {
    return l + r;
};

console.log(obj.add(1, 2));
&lt;/pre&gt;

Let's write that same function in PHP.  It has very similar syntax:
&lt;pre lang=&quot;php&quot;&gt;
&lt;?php
$obj = new stdClass;
$obj-&gt;add = function($l, $r) {
    return $l + $r;
};

echo $obj-&gt;add(1, 2), PHP_EOL;
&lt;/pre&gt;

If you run this you will notice that PHP complains that the object does not have that method.  In PHP, functions are not quite first class citizens.  The variable function is completely ignored and only explicitly declared method's are allowed to be called this way.  We need to modify our example to make this work:
&lt;pre lang=&quot;php&quot;&gt;
&lt;?php
$obj = new stdClass;
$obj-&gt;add = function($l, $r) {
    return $l + $r;
};

$add = $obj-&gt;add;
echo $add(1, 2), PHP_EOL;
&lt;/pre&gt;

With these nuances out of the way, you have can have a productive functional hacking session.  Have fun!
</content>
 </entry>
 
 <entry>
   <title>PHP goes functional in version 5.3</title>
   <link href="http://hermanradtke.com/2010/03/13/php-goes-functional-in-version-5-3.html"/>
   <updated>2010-03-13T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/03/13/php-goes-functional-in-version-5-3</id>
   <content type="html">It has been said that all languages, over time, implement a dialect of lisp.  &lt;a class=&quot;zem_slink&quot; title=&quot;PHP&quot; rel=&quot;homepage&quot; href=&quot;http://www.php.net/&quot;&gt;PHP&lt;/a&gt; appears to be no exception.  
&lt;!--more--&gt;
In PHP 5.3 lambda (or anonymous) functions and closures were added to the language.  These give PHP somewhat of a functional feel and can be very useful tools for solving problems.  One great example is the &lt;a href=&quot;http://rad-dev.org/lithium&quot;&gt;Lithium&lt;/a&gt; framework use of closures to implement filters.  Filters are an implementation of &lt;a class=&quot;zem_slink&quot; title=&quot;Aspect-oriented programming&quot; rel=&quot;wikipedia&quot; href=&quot;http://en.wikipedia.org/wiki/Aspect-oriented_programming&quot;&gt;aspect oriented programming&lt;/a&gt; (AOP).  Other frameworks, like &lt;a class=&quot;zem_slink&quot; title=&quot;Zend Framework&quot; rel=&quot;homepage&quot; href=&quot;http://framework.zend.com/&quot;&gt;Zend Framework&lt;/a&gt;, are looking at these new functional tools to streamline complex and/or heavy components.  I strongly believe that these new functional features will be the new &quot;hotness&quot; for PHP in the coming year.  Expect quite a few conference sessions and tutorials devoted this very topic.

All this talk of &lt;a class=&quot;zem_slink&quot; title=&quot;Functional programming&quot; rel=&quot;wikipedia&quot; href=&quot;http://en.wikipedia.org/wiki/Functional_programming&quot;&gt;functional language&lt;/a&gt; features is great, but Lithium is still in development, Zend Framework 2.0 is a ways away, you have an upcoming project deadline and you want to know how this stuff can help you now.  Easy: go read or watch JavaScript examples.  Seriously.  Watching &lt;a class=&quot;zem_slink&quot; title=&quot;Douglas Crockford&quot; rel=&quot;homepage&quot; href=&quot;http://crockford.com/&quot;&gt;Douglas Crockford&lt;/a&gt;'s videos on YUI theatre or reading through &lt;a class=&quot;zem_slink&quot; title=&quot;Ext (JavaScript library)&quot; rel=&quot;homepage&quot; href=&quot;http://extjs.com/&quot;&gt;ExtJS&lt;/a&gt; source code can give you really good insight into the power of functional language features.  The syntax may be different, but the core ideas are the same.

The new functional feel of PHP seems to have started a trend towards a unified constructor.  This has been a common practice in the JavaScript community for some time.  The great thing is that the PHP array is very similar to the JavaScript object.  In fact, the &lt;a class=&quot;zem_slink&quot; title=&quot;JSON&quot; rel=&quot;homepage&quot; href=&quot;http://json.org&quot;&gt;JSON&lt;/a&gt; extension to PHP makes them completely interchangeable.  Here is a quick example of one unified constructor implementation in PHP:

&lt;pre lang=&quot;php&quot;&gt;
&lt;?php

$p = array(
    'a' =&gt; 'hi',
    'adder' =&gt; function($n) { return $n + 1; },
    'c' =&gt; 3,
    'd' =&gt; new stdClass
);

class base {
    function __construct(array $params)
    {
        foreach ($params as $key =&gt; $value) {
            $this-&gt;$key = $value;
        }
    }
}

class foo extends base { }

$foo = new foo($p);
&lt;/pre&gt;

I have a bunch of ideas (some great, some maybe not so great) that I plan on implementing using lambda functions and closures.  I will be adding new components to my &lt;a href=&quot;http://github.com/hradtke/crimson&quot;&gt;Crimson&lt;/a&gt; library and discussing them here.

&lt;div class=&quot;zemanta-pixie&quot; style=&quot;margin-top: 10px; height: 15px;&quot;&gt;&lt;a class=&quot;zemanta-pixie-a&quot; title=&quot;Reblog this post [with Zemanta]&quot; href=&quot;http://reblog.zemanta.com/zemified/276ba760-1b29-4059-bb14-8c6143cf67fc/&quot;&gt;&lt;img class=&quot;zemanta-pixie-img&quot; style=&quot;border: medium none; float: right;&quot; src=&quot;http://img.zemanta.com/reblog_e.png?x-id=276ba760-1b29-4059-bb14-8c6143cf67fc&quot; alt=&quot;Reblog this post [with Zemanta]&quot; /&gt;&lt;/a&gt;&lt;span class=&quot;zem-script more-related pretty-attribution&quot;&gt;&lt;script src=&quot;http://static.zemanta.com/readside/loader.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;/span&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Mocking Zend Framework's Row and Rowset objects</title>
   <link href="http://hermanradtke.com/2010/02/08/mocking-zend-frameworks-row-and-rowset-objects.html"/>
   <updated>2010-02-08T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/02/08/mocking-zend-frameworks-row-and-rowset-objects</id>
   <content type="html">If you separate your business logic from your data access logic, the last thing you want to do is make your business logic unit tests reliant on the database.  This is normally not a big deal: retrieve the data, store it in an array and pass it off to the class with the business logic.  Mocking the data for the unit test simply requires you to hardcode from array information in the test.  However, I recently ran into a case where I wanted to pass Zend_Db_Table_Row and Zend_Db_Table_Row objects to the business logic and mocking them was not so easy.

&lt;!--more--&gt;I first attempted to mock Zend_Db_Table_Row using PHPUnit's _getMock method.  This proved to be an exercise in futility.  I did not want the class to connect to the database to verify whether or not the columns were valid.  After a few frustrating hours, I started to wonder how Zend was unit testing Zend_Db_Table_Row.  So I downloaded the full version of the latest Zend Framwork and started poking around.  I stumbled upon My_ZendDbTable_Row_TestMockRow hiding away in ZendFramework-1.9.5/tests/Zend/Db/Table/_files/My/ZendDbTable/Row/TestMockRow.php.  I will not go into what was done to make it a usable mock, but I will show you how to use it.

&lt;pre lang=&quot;php&quot;&gt;
&lt;?php

require_once 'PHPUnit/Framework/TestCase.php';
require_once 'tests/Zend/Db/Table/_files/My/ZendDbTable/Row/TestMockRow.php';

class TestMockRowTest extends PHPUnit_Framework_TestCase
{
    public function testRowHasIdValue()
    {
        $data = array(
            'data' =&gt; array(
                'first_name' =&gt; 'Herman',
                'last_name' =&gt; 'Radtke',
                'email' =&gt; 'herman@example.com'
            )
        );

        $row = new My_ZendDbTable_Row_TestMockRow($data);
        $this-&gt;assertEquals('Herman', $row-&gt;first_name);
        $this-&gt;assertEquals('Radtke', $row-&gt;last_name);
        $this-&gt;assertEquals('herman@example.com', $row-&gt;email);
    }
}
&lt;/pre&gt;

Creating a mock row object is much like hardcoding an array.   Define an array that has a single key 'data' that contains an array as a value.   Inside this array, the database column name is the array key and the database column value is the array value.

That class works great for mocking a single row object, but I still needed a solution for multiple row objects.  I expected to find a class similar to My_ZendDbTable_Row_TestMockRow for the purposes of testing Zend_Db_Table_Rowset, but none existed.  Fortunately, it took only a few minutes to create my own.  All one has to do is specify the name of the row class for the rowset class to use.

&lt;pre lang=&quot;php&quot;&gt;
&lt;?php

require_once 'PHPUnit/Framework/TestCase.php';
require_once 'library/Zend/Db/Table/Rowset/Abstract.php';
require_once 'tests/Zend/Db/Table/_files/My/ZendDbTable/Row/TestMockRow.php';

class ZendDbTableMockRowset extends Zend_Db_Table_Rowset_Abstract
{
    protected $_rowClass = 'My_ZendDbTable_Row_TestMockRow';
}

class RowsetTest extends PHPUnit_Framework_TestCase
{
    public function testConstructor()
    {
        $rowset = new ZendDbTableMockRowset(array(
            'data'=&gt; array(
                array(
                    'id' =&gt; 123456
                ),
                array(
                    'id' =&gt; 123457
                ),
                array(
                    'id' =&gt; 123458
                ),
                array(
                    'id' =&gt; 123459
                ),
                array(
                    'id' =&gt; 123460
                )
            )
        ));

        $id = 123456;
        foreach ($rowset as $row) {
            $this-&gt;assertTrue(($row instanceof My_ZendDbTable_Row_TestMockRow));
            $this-&gt;assertEquals($id, $row-&gt;id);
            $id++;
        }
    }
}
&lt;/pre&gt;

The array passed to the mock rowset has a similar structure to the one we used above.   The only difference is that we have multiple arrays, inside the 'data' array, each representing one row.   For testing purposes, I created an 'id' field.   I normally would not ever use an artificial key field inside a business logic class since that value is very dependent on the database.

I created a ZendDbTableMockRowset class in my projects test/mocks directory so I can use it in multiple test files.  I also copied My_ZendDbTable_Row_TestMockRow into the test/mocks directory so I would not be dependent on the external tests from Zend Framework.  Now mocking Row or Rowset objects is just as fast as mocking arrays.
</content>
 </entry>
 
 <entry>
   <title>Logging Exception Traces To syslog</title>
   <link href="http://hermanradtke.com/2010/02/06/logging-exception-traces-to-syslog.html"/>
   <updated>2010-02-06T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/02/06/logging-exception-traces-to-syslog</id>
   <content type="html">If you have ever visited &lt;a class=&quot;zem_slink&quot; title=&quot;Stack Overflow&quot; rel=&quot;homepage&quot; href=&quot;http://stackoverflow.com/&quot;&gt;StackOverflow.com&lt;/a&gt; you may have noticed the ads for &lt;a class=&quot;zem_slink&quot; title=&quot;Splunk&quot; rel=&quot;homepage&quot; href=&quot;http://www.splunk.com/&quot;&gt;Splunk&lt;/a&gt;.  Splunk aggregates log files together and provides a web interface to search through those logs.  The setup for php is easy: set the php.ini error_log value to &quot;&lt;a class=&quot;zem_slink&quot; title=&quot;Syslog&quot; rel=&quot;wikipedia&quot; href=&quot;http://en.wikipedia.org/wiki/Syslog&quot;&gt;syslog&lt;/a&gt;&quot;.  The Splunk instructions show you how add a single line to your syslong.conf to have syslog send those messages over to Splunk.&lt;!--more--&gt;

The only downside to this is that syslog commonly has a limit of 1024 characters per message.  You can change this, but you have to recompile the kernel.  This is especially frustrating when an uncaught exception gets logged.  The log message looks something like this:
&lt;blockquote&gt;PHP Fatal error:  Uncaught exception 'Zend_Db_Statement_Exception' with message 'SQLSTATE[HY093]:
Invalidparameter number: no parameters were bound' in /some/path/to/Zend/Db/Statement
/Pdo.php:234Stack trace: #0 /some/path/to/Zend/Db/Statement.php(320): Zend_Db_Statement_
Pdo-&amp;gt;_execute(Array)#1 /some/path/to/Zend/Db/Adapter/Pdo/Mysql.php(572): Zend_Db_
Statement-&amp;gt;execute(Array) #2 /some/path/to/Zend/Db&lt;/blockquote&gt;
If you have used Zend_Db_Statement you have probably seen this error message.  If not, it simply means that too few variables are being specified or one of the variables is null when trying to bind all the variables to the placeholders in a SQL statement.  Do you see the problem with this log message though?  It gets cut off way before the stack trace provides any hint as to what code caused it.  If I am using automated testing, it may be very difficult to tell what actually caused the exception.

To get around this, I wrote an exception handler to split the stack trace into separate messages.
&lt;blockquote&gt;SQLSTATE[HY093]: Invalid parameter number: no parameters were bound Strack Trace:
PHP 0. _execute /some/path/to/Zend/Db/Statement.php:320
PHP 1. execute /some/path/to/Zend/Db/Adapter/Pdo/Mysql.php:572
PHP 2. query /some/path/to/Zend/Db/Table/Abstract.php:1509
PHP 3. _fetch /some/path/to/Zend/Db/Table/Abstract.php:1325
PHP 4. getDooDads /some/path/to/application/default/models/DooDads.php:112
PHP 5. getAction /some/path/to/application/default/controllers/DooDadsController.php:15
PHP 6. init /some/path/to/Zend/Controller/Action.php:133
PHP 7. __construct /some/path/to/Zend/Controller/Dispatcher/Standard.php:262
PHP 8. dispatch /some/path/to/Zend/Controller/Front.php:946
PHP 9. dispatch /some/path/to/html/index.php:23&lt;/blockquote&gt;
Now it is very clear that I need to add some more validation to my DooDads model.

The code is on github &lt;a href=&quot;http://github.com/hradtke/crimson/tree/master/Crimson_ExceptionHandler/&quot;&gt;here&lt;/a&gt;.  I am able to just drop it in to any project I am working on and get more verbose logging via syslog.
&lt;div class=&quot;zemanta-pixie&quot; style=&quot;margin-top: 10px; height: 15px;&quot;&gt;&lt;a class=&quot;zemanta-pixie-a&quot; title=&quot;Reblog this post [with Zemanta]&quot; href=&quot;http://reblog.zemanta.com/zemified/8665acfa-63c5-429c-8dbf-6d77b874e655/&quot;&gt;&lt;img class=&quot;zemanta-pixie-img&quot; style=&quot;border: medium none; float: right;&quot; src=&quot;http://img.zemanta.com/reblog_e.png?x-id=8665acfa-63c5-429c-8dbf-6d77b874e655&quot; alt=&quot;Reblog this post [with Zemanta]&quot; /&gt;&lt;/a&gt;&lt;span class=&quot;zem-script more-related pretty-attribution&quot;&gt;&lt;script src=&quot;http://static.zemanta.com/readside/loader.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div id=&quot;_mcePaste&quot; style=&quot;overflow: hidden; position: absolute; left: -10000px; top: 18px; width: 1px; height: 1px;&quot;&gt;PHP Fatal error:  Uncaught exception 'Zend_Db_Statement_Exception' with message 'SQLSTATE[HY093]:
Invalidparameter number: no parameters were bound' in /some/path/to/Zend/Db/Statement/Pdo.php:234
Stack trace: #0 /some/path/to/Zend/Db/Statement.php(320): Zend_Db_Statement_Pdo-&amp;gt;_execute(Array)
#1 /some/path/to/Zend/Db/Adapter/Pdo/Mysql.php(572): Zend_Db_Statement-&amp;gt;execute(Array) #2 /some/
path/to/Zend/Db&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Canonical Version Numbers with Git</title>
   <link href="http://hermanradtke.com/2010/02/05/canonical-version-numbers-with-git.html"/>
   <updated>2010-02-05T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/02/05/canonical-version-numbers-with-git</id>
   <content type="html">Brandon Savage wrote a &lt;a href=&quot;http://www.brandonsavage.net/why-subversion-still-beats-git/&quot; target=&quot;_blank&quot;&gt;controversial blog post&lt;/a&gt; about why subversion is still more relevant than git.  His main point was that enterprise requires canonical version numbering to track progress in the application and that git cannot do this.   There was a lot of debate about this on Brandson's, but a recent comment by Morgan proved Brandon wrong.

&lt;!--more--&gt;

I have never had a problem with the lack of canonical version numbers, but I can see why companies who have used CVS or subversion for a long time would be wary of getting rid of them.  Morgan explains how to use the &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-describe.html&quot; target=&quot;_blank&quot;&gt;git describe&lt;/a&gt; command to generate canonical version numbers.  I have used git for a while for personal projects and at HauteLook, but have never used this command.  I thought this was a great solution to a problem a lot of companies face when trying to migrate from subversion to git.

Morgan's comment:
&lt;blockquote&gt;git describe –tags –long

This gives you a string like (in the case of one of my projects)

2.1pre5-4-g675eae1

which is formatted as

{last reachable tag name}-{# of commits since that tag}-#{SHA of HEAD}

This gives you a ‘canonical version number’ (spelling corrected) that is monotonically increasing by commits, and unique across multiple repositories of development. If we’re all on the same HEAD, it will return the same value. If we all share the same most-recent-tag, but have different commits, the SHA will be different.&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Unit Testing and the Law of Demeter</title>
   <link href="http://hermanradtke.com/2010/01/17/unit-testing-and-the-law-of-demeter.html"/>
   <updated>2010-01-17T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/01/17/unit-testing-and-the-law-of-demeter</id>
   <content type="html">I was writing some code today and not using &lt;a class=&quot;zem_slink&quot; title=&quot;Test-driven development&quot; rel=&quot;wikipedia&quot; href=&quot;http://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;Test-Driven development&lt;/a&gt;.  The reason was that I did not have a good understanding of what I was writing, so I decided to write some of the guts before writing the tests.   In the process of writing the guts, I recognized that I was paying very close attention to how I was going to later test each of the methods I was writing.  I was paying especially close attention to the &lt;a class=&quot;zem_slink&quot; title=&quot;Law of Demeter&quot; rel=&quot;wikipedia&quot; href=&quot;http://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;Law of Demeter&lt;/a&gt;.   The idea behind the Law of Demeter is to keep units of code distinct from one another.  So how did this relate to my code?   To put it simply, my business logic methods did not use get methods.
&lt;!--more--&gt;

Assume we have a person class.  The class constructor takes the persons full name and we have a getter and setter for the full name.
&lt;pre lang=&quot;php&quot;&gt;
&lt;?php
class Person
{
    protected $fullName;

    public function __construct($fullName)
    {
        $this-&gt;setFullName($fullName);
    }

    public function setFullName($fullName)
    {
        $this-&gt;_fullName = $fullName;
    }

    public function getFullName()
    {
        return $this-&gt;_fullName;
    }
}
&lt;/pre&gt;
There is also a method that parses apart the persons full name into separate parts.  The naive approach:
&lt;pre lang=&quot;php&quot;&gt;    public function parseFullName()
    {
        $nameParts = explode(' ', $this-&gt;getFullName());
        ...
    }&lt;/pre&gt;
This code works fine, but think about how we will write a test for this function.  We have to first set the full name using a setter so the parseFullName method can retrieve that value with a getter.  This violates one of the principle rules of unit testing: testing individual units of code.  If there is a bug in the getter or setter functions, they may inadvertently affect my test.  This is a very real issue when using the magic __get and __set methods.  It also means more work to setup your tests because you have to keep in mind an order of operations when testing.

The better approach:
&lt;pre lang=&quot;php&quot;&gt;    public function parseFullName($fullName)
    {
        $nameParts = explode(' ', $fullName);
        ...
    }&lt;/pre&gt;
Notice how the parseFullName function is being &lt;em&gt;told&lt;/em&gt; what to parse rather than &lt;em&gt;asking&lt;/em&gt; what to parse.  This subtle change now allows us to truly test this individual unit of code with the least amount of outside environment interaction.
&lt;div class=&quot;zemanta-pixie&quot; style=&quot;margin-top: 10px; height: 15px;&quot;&gt;&lt;a class=&quot;zemanta-pixie-a&quot; title=&quot;Reblog this post [with Zemanta]&quot; href=&quot;http://reblog.zemanta.com/zemified/6314f3a0-e1d8-4018-a07a-9b9cb50489c9/&quot;&gt;&lt;img class=&quot;zemanta-pixie-img&quot; style=&quot;border: medium none; float: right;&quot; src=&quot;http://img.zemanta.com/reblog_e.png?x-id=6314f3a0-e1d8-4018-a07a-9b9cb50489c9&quot; alt=&quot;Reblog this post [with Zemanta]&quot; /&gt;&lt;/a&gt;&lt;span class=&quot;zem-script more-related pretty-attribution&quot;&gt;&lt;script src=&quot;http://static.zemanta.com/readside/loader.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;/span&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Speaking at Jan. 20th LA LAMP meetup</title>
   <link href="http://hermanradtke.com/2010/01/16/speaking-at-jan-20th-la-lamp-meetup.html"/>
   <updated>2010-01-16T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/01/16/speaking-at-jan-20th-la-lamp-meetup</id>
   <content type="html">I will be giving a short presentation on HauteLook's architecture at the &lt;a title=&quot;LA LAMP website&quot; href=&quot;http://www.meetup.com/lalamp/&quot;&gt;LA LAMP meetup&lt;/a&gt; on January 20th.  I have been meaning to join a user group for some time, so this worked out perfectly.  Any developers in the LA area on that day should come, even if it is just for the free food and beer.
</content>
 </entry>
 
 <entry>
   <title>Facebook Thrift PHP Client</title>
   <link href="http://hermanradtke.com/2010/01/16/facebook-thrift-php-client.html"/>
   <updated>2010-01-16T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2010/01/16/facebook-thrift-php-client</id>
   <content type="html">A while back I wrote a post about using &lt;a href=&quot;http://www.hermanradtke.com/blog/?p=52&quot;&gt;Facebook's Thrift&lt;/a&gt;.  One comment asked me to post the PHP client used to connect to the C++ server I was demo'ing.  Most of the client is boiler-plate code generated by Thrift, so I chose to omit it at the time.  Here it is:
&lt;!--more--&gt;
&lt;pre lang=&quot;php&quot;&gt;
#!/usr/bin/env php
&lt;?php
$GLOBALS['THRIFT_ROOT'] = '/path/to/thrift';

require_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';
require_once $GLOBALS['THRIFT_ROOT'].'/protocol/TBinaryProtocol.php';
require_once $GLOBALS['THRIFT_ROOT'].'/transport/TSocket.php';
require_once $GLOBALS['THRIFT_ROOT'].'/transport/THttpClient.php';
require_once $GLOBALS['THRIFT_ROOT'].'/transport/TBufferedTransport.php';

require_once 'Sale.php';

try {
  $socket = new TSocket('localhost', 9090);
  $transport = new TBufferedTransport($socket, 1024, 1024);
  $protocol = new TBinaryProtocol($transport);
  $client = new SaleClient($protocol);

  $transport-&gt;open();

  $d = new Sale_deal();

  $d-&gt;dealno = 12345;
  $d-&gt;term = 2;
  $d-&gt;payment = 500.1;
  $d-&gt;amtfin = 1000.00;

  echo 'Total cost: ' . $client-&gt;calc_apr($d) . &quot;\n&quot;;

  $transport-&gt;close();

} catch (TException $tx) {
  print 'TException: '.$tx-&gt;getMessage().&quot;\n&quot;;
}
&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Phing - phplint task</title>
   <link href="http://hermanradtke.com/2009/11/18/phing-phplint-task.html"/>
   <updated>2009-11-18T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/11/18/phing-phplint-task</id>
   <content type="html">&lt;a href=&quot;http://phing.info/trac/&quot;&gt;Phing&lt;/a&gt; is a PHP port of Java Ant.  It is a great tool to use in development.  It standardizes a lot of build scripts you would have to maintain internally.  Unfortunately, examples seem to be lacking.  As a quick introduction to Phing, I will show how you can check all your php scripts for syntax errors.

&lt;!--more--&gt; If you have never heard of Phing before, I suggest you visit the &lt;a href=&quot;http://phing.info/docs/guide/current/chapters/GettingStarted.html&quot;&gt;getting started page&lt;/a&gt;.

The phplint task will syntax check one or more files containing php source code.  All it requires is a list of files.

Here is the sample build.xml file:
&lt;pre lang=&quot;xml&quot;&gt;
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;project name=&quot;MyPhpProject&quot; basedir=&quot;.&quot; default=&quot;lint&quot;&gt;
    &lt;target name=&quot;lint&quot;&gt;
        &lt;phplint&gt;
            &lt;fileset dir=&quot;.&quot;&gt;
                &lt;include name=&quot;*.php&quot; /&gt;
                &lt;include name=&quot;**/*.php&quot; /&gt;
            &lt;/fileset&gt;
        &lt;/phplint&gt;
    &lt;/target&gt;
&lt;/project&gt;
&lt;/pre&gt;

We created a target called &quot;lint&quot;.  This will allow us to call lint from the command line.  In that target we specify a single task: phplint.  The phplint task will call &quot;php -l&quot; on each filename provided.  Within that task we specify a &lt;a href=&quot;http://phing.info/docs/guide/current/chapters/appendixes/AppendixD-CoreTypes.html#Fileset&quot;&gt;fileset&lt;/a&gt; type.  The fileset type is what provides the phplint task with files to syntax check.

The fileset type can get pretty complex.  I have intentionally kept it simple.  The dir attribute on the fileset type specifies the current directory.  The first include element will match any file with a &quot;.php&quot; extension in the current directory.  The second include element will match any file with a &quot;.php&quot; extension in a sub-directory.

Here is a visualization of how the fileset is working:
&lt;pre&gt;
app/
    build.xml &lt;-- will not match
    foo.php &lt;-- will match
    bar.php &lt;-- will match
    includes/
        baz.php &lt;-- will match
        special/
            special1.php &lt;-- will match
            special2.inc &lt;-- will not match
    sql/
        schema.sql &lt;-- will not match
&lt;/pre&gt;

Place the build.xml file at the root of your applications directory structure.  You can move it to another folder after you get more comfortable with phing.

From the command line run: phing lint

&lt;img alt=&quot;&quot; src=&quot;http://farm3.static.flickr.com/2648/4116616256_327cf8fb1a.jpg&quot; title=&quot;phplint task&quot; class=&quot;alignnone&quot; width=&quot;500&quot; height=&quot;196&quot; /&gt;
</content>
 </entry>
 
 <entry>
   <title>Zend_Soap_AutoDiscover and eAccelerator</title>
   <link href="http://hermanradtke.com/2009/11/17/zend_soap_autodiscover-and-eaccelerator.html"/>
   <updated>2009-11-17T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/11/17/zend_soap_autodiscover-and-eaccelerator</id>
   <content type="html">The &lt;a class=&quot;zem_slink&quot; title=&quot;Zend Framework&quot; rel=&quot;homepage&quot; href=&quot;http://framework.zend.com/&quot;&gt;Zend Framework&lt;/a&gt; ships with &lt;a class=&quot;zem_slink&quot; title=&quot;SOAP&quot; rel=&quot;wikipedia&quot; href=&quot;http://en.wikipedia.org/wiki/SOAP&quot;&gt;SOAP&lt;/a&gt; functionality and one especially neat class called Zend_Soap_AutoDiscover.  &lt;a href=&quot;http://framework.zend.com/&quot;&gt;&lt;img class=&quot;alignright&quot; title=&quot;Zend Framework Logo&quot; src=&quot;http://framework.zend.com/images/logo_small.gif&quot; alt=&quot;&quot; width=&quot;123&quot; height=&quot;23&quot; /&gt;&lt;/a&gt;This class uses a comment docblock to auto-generate a &lt;a class=&quot;zem_slink&quot; title=&quot;Web Services Description Language&quot; rel=&quot;wikipedia&quot; href=&quot;http://en.wikipedia.org/wiki/Web_Services_Description_Language&quot;&gt;WSDL&lt;/a&gt; at runtime.  I won't go into the details how it works here, but you can check the &lt;a href=&quot;http://framework.zend.com/manual/en/zend.soap.autodiscovery.html&quot;&gt;Zend Framework documentation&lt;/a&gt; for an example.  When using this class at work, I noticed the WSDL would not always generate correctly.  After a lot of digging around, I found the cause: eAccelerator.

&lt;!--more--&gt;

eAccelerator is an opcode cache.  An opcode cache saves the compiled version of a script so &lt;a class=&quot;zem_slink&quot; title=&quot;PHP&quot; rel=&quot;homepage&quot; href=&quot;http://www.php.net/&quot;&gt;PHP&lt;/a&gt; does not have to parse it again.  eAccelerator also&lt;a href=&quot;http://eaccelerator.net/ticket/229&quot;&gt; strips out comments&lt;/a&gt; from the script by default.  That means once your script gets cached, the Zend_Soap_AutoDiscover class has no way of correctly auto-generating the WSDL.

&lt;a href=&quot;http://eaccelerator.net/&quot;&gt;&lt;img class=&quot;alignnone&quot; title=&quot;eAccelerator logo&quot; src=&quot;http://eaccelerator.net/chrome/common/eaccelerator.png&quot; alt=&quot;&quot; width=&quot;247&quot; height=&quot;33&quot; /&gt;&lt;/a&gt;

Fortunately, there are some easy solutions to this problem.  The easiest is to configure eAccelerator 0.9.6 to not strip out the comments.  When compiling eAccelerator, specify the --with-eaccelerator-doc-comment-inclusion switch in the configure script.  Install the new compiled version and make sure to &lt;em&gt;clean&lt;/em&gt; out your existing cache directory.

Now if you are running eAccelerator 0.9.5, like me, and are unable to upgrade there is still hope.  eAccelerator comes with some ini settings that allow us to not cache scripts.  Using the eaccelerator.filter setting, we can tell eAccelerator to ignore scripts by filename.  You can set it in your php.ini file or just specify it at runtime:
&lt;pre lang=&quot;php&quot;&gt;ini_set('eaccelerator.filter', '!foo/Bar.php !baz.php');&lt;/pre&gt;
With comments preseved, the Zend_Soap_AutoDiscover class will be able to properly generate the WSDL.
&lt;div class=&quot;zemanta-pixie&quot; style=&quot;margin-top: 10px; height: 15px;&quot;&gt;&lt;a class=&quot;zemanta-pixie-a&quot; title=&quot;Reblog this post [with Zemanta]&quot; href=&quot;http://reblog.zemanta.com/zemified/a0294b42-5e52-4c18-a54b-c96c3d9d7afa/&quot;&gt;&lt;img class=&quot;zemanta-pixie-img&quot; style=&quot;border: medium none ; float: left;&quot; src=&quot;http://img.zemanta.com/reblog_e.png?x-id=a0294b42-5e52-4c18-a54b-c96c3d9d7afa&quot; alt=&quot;Reblog this post [with Zemanta]&quot; /&gt;&lt;/a&gt;&lt;span class=&quot;zem-script more-related pretty-attribution&quot;&gt;&lt;script src=&quot;http://static.zemanta.com/readside/loader.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;/span&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>PHP Standards</title>
   <link href="http://hermanradtke.com/2009/11/17/php-standards.html"/>
   <updated>2009-11-17T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/11/17/php-standards</id>
   <content type="html">I think PHP desperately needs a standard.  I really admire Python's PEP process and especially &lt;a href=&quot;http://www.python.org/dev/peps/pep-0008/&quot;&gt;PEP 8&lt;/a&gt;.  This is why I am really torn on the issue of openness within the &lt;a href=&quot;http://groups.google.com/group/php-standards&quot;&gt;PHP Standards Working Group&lt;/a&gt;.  Greg Beaver has been against a moderated group from the beginning.  Today, he made a &lt;a href=&quot;http://greg.chiaraquartet.net/archives/206-How-to-put-the-FAIL-in-open-source.html&quot;&gt;public appeal for action&lt;/a&gt; and I think everyone who is involved in PHP should listen.  Whether you agree with Greg or not, get involved now.  Anyone who has been involved in the PHP community should realize the lasting effect of bad decisions.

My take on the issue:
Every should have a right to vote.  I have no problem if a group comes together and creates a standard for the PHP language.  I realize there is a lot of noise on public lists and at the end of the day, something needs to get done.  However, the entire community should be able to vote on that standard before it becomes an official part of PHP.  PHP Standards Working Group: lead away, but remember at the end of the day you are working for us.
</content>
 </entry>
 
 <entry>
   <title>Using the PHP 5.3 __DIR__ magic constant</title>
   <link href="http://hermanradtke.com/2009/11/16/using-the-php-5-3-__dir__-magic-constant.html"/>
   <updated>2009-11-16T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/11/16/using-the-php-5-3-__dir__-magic-constant</id>
   <content type="html">There is a new magic constant in PHP 5.3: __DIR__.  This new constant does not actually do anything new.  It replaces the use of dirname(__FILE__) that is commonly found  code using prior PHP versions.

&lt;!--more--&gt;

One of the troubles with including files is that the current directory is constantly a moving target.  Consider the following structure:

&lt;pre&gt;
index.php
admin/index.php
includes/
    foo.php
    bar.php
&lt;/pre&gt;

Imagine for a moment that both index.php and admin/index.php include includes/foo.php.  If foo.php includes bar.php, the relative directory is either &quot;../&quot; or &quot;../admin/&quot; depending on whether index.php or admin/index.php was executed.  The use of the dirname() function along with the __FILE__ magic constant solved this problem for a long time.

The __FILE__ magic constant gives the full path and filename of the current file.  The dirname() function gives the directory name of a file path.  This was used prior to PHP 5.3 to solve the include problem described above.

&lt;pre lang=&quot;php&quot;&gt;
&lt;?php
// foo.php
require_once dirname(__FILE__) . '/bar.php';
?&gt;
&lt;/pre&gt;

In PHP 5.3, this has been super-ceded by the use of the __DIR__ magic constant.

&lt;pre lang=&quot;php&quot;&gt;
&lt;?php
// foo.php
require_once __DIR__ . '/bar.php';
?&gt;
&lt;/pre&gt;

Why the change?  Well, it is more succinct and more clear on what is going on.  Also, the magic constant is part of the Zend engine, so it is a little more performant as well.  
</content>
 </entry>
 
 <entry>
   <title>Scaling URL's</title>
   <link href="http://hermanradtke.com/2009/11/15/scaling-urls.html"/>
   <updated>2009-11-15T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/11/15/scaling-urls</id>
   <content type="html">Using non-relative URL's during early development can alleviate a lot of growing pains.  This may seem counter-intuitive at first, but hear me out.  We all learned long ago to stop hard-coding the domain name into the href attribute of an anchor tag.  Instead, we used relative URL's such as '/index.php' to make our code much more portable.  However, relative URL's become a pain point when trying to scale your website.  Let's review some common scenarios that can be averted with some proper planning.

&lt;!--more--&gt;

Common scenario's:
&lt;ol&gt;
&lt;li&gt;The time comes for a CDN and all images need to be served up with a URL like cdn.example.com.&lt;/li&gt;
&lt;li&gt;The use of SSL is very common for authentication and other sensitive user information.  The problem is that SSL is much slower than a normal http request.  Traffic needs to be segregated by changing the SSL URL's from https://www.example.com to https://secure.example.com.&lt;/li&gt;
&lt;/ol&gt;

The solution to these problems is quite trivial: simply prepend a domain to a relative URL.  Consider the following config file:

&lt;pre&gt;
[development]
site.cdn = &quot;http://dev.example.com&quot;
site.ssl = &quot;https://dev.example.com&quot;

[production]
site.cdn = &quot;http://cdn.example.com&quot;
site.ssl = &quot;https://secure.example.com&quot;
&lt;/pre&gt;

This configuration uses special URL values for a production environment, but uses the standard development server URL so the developers can still develop.  A simple addition to the php bootstrap file can set up defines to use in html templates.

&lt;pre lang=&quot;php&quot;&gt;
&lt;?php
define('CDN', $config-&gt;site-&gt;cdn);
define('SSL', $config-&gt;site-&gt;ssl);
&lt;/pre&gt;

And then in a .phtml file you can simply do the following:
&lt;pre lang=&quot;html&quot;&gt;
&lt;img src=&quot;&lt;?=CDN&gt;/images/hero.png&quot;&gt;

&lt;a href=&quot;&lt;?=SSL&gt;/login.php&quot;&gt;Login&lt;/a&gt;
&lt;/pre&gt;

Consider prepending the domain for all URL's in your application, not just those types listed above.  There are plenty of scenario's that may require AJAX calls or even normal GET/POST request to use different domains.
</content>
 </entry>
 
 <entry>
   <title>Using SPL Exceptions</title>
   <link href="http://hermanradtke.com/2009/11/14/using-spl-exceptions.html"/>
   <updated>2009-11-14T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/11/14/using-spl-exceptions</id>
   <content type="html">Brandon Savage has a &lt;a href=&quot;http://www.brandonsavage.net/exceptional-php-nesting-exceptions-in-php/&quot;&gt;great&lt;/a&gt; &lt;a href=&quot;http://www.brandonsavage.net/exceptional-php-extending-the-base-exception-class/&quot;&gt;series&lt;/a&gt; of &lt;a href=&quot;http://www.brandonsavage.net/exceptional-php-introduction-to-exceptions/&quot;&gt;posts&lt;/a&gt; on using exceptions in PHP.  Unfortunately, he does not introduce the SPL exceptions into the discussion.

&lt;!--more--&gt;

The Standard PHP Library (SPL) has quite a few exception &lt;a href=&quot;http://www.php.net/manual/en/spl.exceptions.php&quot;&gt;classes&lt;/a&gt; that are useful right out of the box.  Additionally, these exceptions can be extended just like the Exception and ErrorException classes.

My favorite is the &lt;a href=&quot;http://www.php.net/manual/en/class.invalidargumentexception.php&quot;&gt;InvalidArgumentException&lt;/a&gt;.  I use this exception if some parameter to a function or method is not what I expected.

&lt;pre lang=&quot;php&quot;&gt;
&lt;?php

function doubleMe($number)
{
    if (!is_numeric($number)) {
        throw new InvalidArgumentException(
            'Unable to double a non-numeric value');
    }
}
&lt;/pre&gt;

If you are using the __call() magic method, the BadMethodCallException is another great built-in exception to use.

&lt;pre lang=&quot;php&quot;&gt;
class Foo
{
    public function __call($name, $params)
    {
        if (!method_exists($this, $name)) {
            throw new BadMethodCallException(
                &quot;Method $name does not exist&quot;);
        }
    }
}
&lt;/pre&gt;

The SPL exception classes are a great alternative to writing your own exceptions classes.  For some more examples you can check out PHPUnit.  Sebastian Bergmann uses a lot of SPL exceptions in his code there.
</content>
 </entry>
 
 <entry>
   <title>Why I am not running to Solar</title>
   <link href="http://hermanradtke.com/2009/11/12/why-i-am-not-running-to-solar.html"/>
   <updated>2009-11-12T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/11/12/why-i-am-not-running-to-solar</id>
   <content type="html">Some of my thoughts on &lt;a href=&quot;http://paul-m-jones.com/?p=1113&quot;&gt;Paul M. Jones post about Solar and Zend Framework&lt;/a&gt;.  This is less of a defense of Zend Framework and more of a commentary on Paul's framework ideas.

I favor design by contract so I can properly type-hint method parameters.  A framework should be written in a way I can safely extend the crap out of.  This is the exact use case of interfaces.

Universal constructors make the code harder to read.  I see this as a sign that inheritance is being used way too much.  Compose people, compose!

The registry pattern is not any better than a singleton.  They both have global scope.

I do like that there are so many ways to inject dependencies.  The MVC framework is also pretty nice.
</content>
 </entry>
 
 <entry>
   <title>Hidden features with spl_autoload() and namespaces</title>
   <link href="http://hermanradtke.com/2009/10/25/hidden-features-with-spl_autoload-and-namespaces.html"/>
   <updated>2009-10-25T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/10/25/hidden-features-with-spl_autoload-and-namespaces</id>
   <content type="html">The namespace operator in PHP 5.3 is a backslash (\).  One of the criticisms of this operator is that the code starts to look like directory paths on Windows.  The added side benefit of this is that spl_autoload() knows how to autoload classes that use a namespace style that matches the directory layout.

&lt;!--more--&gt;
&lt;pre lang=&quot;php&quot;&gt;$baz = new \foo\bar\Baz;&lt;/pre&gt;
The spl_autoload() function gets passed the fully qualified namespace as well as the class name.  This is very similar to the PEAR class naming convention of using underscore characters (_) to denote the path to a class.

Consider the following:

The spl_autoload() funtion is passed the string 'foo\Bar'.  The extensions registered by spl_autoload_extensions() are then used in conjunction with include paths to look for a valid file.  The spl_autoload_extensions() function has the extensions .inc and .php registered by default.  The default include_path is the current directory, so let's assume the current directory is D:\herman\php.

List of attempts by spl_autoload() to load the class from the above example:
&lt;ul&gt;
	&lt;li&gt;D:\herman\php\foo\Bar.inc&lt;/li&gt;
	&lt;li&gt;D:\herman\php\foo\Bar.php&lt;/li&gt;
&lt;/ul&gt;
This means that you can map each namespace to a directory in your application.  Consider the following directory layout.

blog\
models\
Author.php
controllers\
PostController.php

The namespace for the Author class in the Author.php file should be 'blog\models'.  The namespace for the PostController class in the PostController.php file should be 'blog\controllers'.  Using this namespacing strategy along with a proper include path allows php to autoload your classes out of the box.

&lt;span style=&quot;color: #ff0000;&quot;&gt;Remember, this only works with PHP on Windows.  I have a pending patch to make spl_autoload() work with namespacing by default on Linux.&lt;/span&gt;
</content>
 </entry>
 
 <entry>
   <title>Doing It "Right"</title>
   <link href="http://hermanradtke.com/2009/09/06/doing-it-right.html"/>
   <updated>2009-09-06T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/09/06/doing-it-right</id>
   <content type="html">I have always been of the opinion that doing a task the correct way the first time is the best way to complete the task. I don't mean to imply that there is one correct way of completing a task, only that doing it correctly does not involve cutting corners or using hacks to complete the task.  I have always preached this ideal as a developer, never the decision maker.  Now, I am currently working on a project with a few colleagues of mine where I am a decision maker.  Earlier today I began wondering whether my ideals will change as this project grows.

&lt;!--more--&gt;

To be clear, I do not think that doing it &quot;right&quot; necessarily means perfection.  For some aspects of development, perfection is impossible or not worth the resources required.  For example, I have never seen a large application with a 100% test coverage.  Some aspects of a program are harder to test than others and the cost may far outweigh the benefits.  I think test coverage of 80% is a very acceptable goal. Another example is the practice of writing a test for each resolved bug.  Again, the costs may outweigh the benefits for very trivial bugs.  For me, making a significant attempt at testing means it is being done &quot;right&quot; even if it is not perfect.

There are aspects of development that can be nearly perfect.  The coding standard, once decided upon, should be adhered to everywhere.  Tools, like PHP_CodeSniffer, inform the developer of any deviation from the standard.  This makes it trivial for any such deviation to be fixed &lt;em&gt;before&lt;/em&gt; the code makes it into production. Yet many companies never enforce their coding standard. The fact that it takes minimal effort for the developer to write code that adheres to the standard, I think that doing it &quot;right&quot; means no violations are reported from PHP_CodeSniffer.

Doing it &quot;right&quot; means more than just high test coverage and code that adheres to a standard.  These are things that are easily measured and very visible.  Other aspects of development like design and code re-use are just as important. It is very easy to use the Registry Anti-pattern during development because it can get results fast.  Planning out proper dependency injection takes time, especially if one does not do it often.  Code refactoring to allow for code re-use is easily pushed off too because it is not immediately necessary.  Proper design and code re-use are long term investments in a project that pay off dividends.

At what point do the aforementioned ideals become secondary. If a paying client needs a significant modification to a project completed tomorrow, I may throw testing and proper design out the window to make the deadline if I am hurting for income.  All the design and re-use in the world are worth nothing if the project dies tomorrow.  However, if I find myself in that position then I think I made a mistake somewhere else along the way.

I hope to use this post as a litmus test to measure my growth in the industry.
</content>
 </entry>
 
 <entry>
   <title>Crimson framework PHP 5.3 branch</title>
   <link href="http://hermanradtke.com/2009/07/08/crimson-framework-php-5-3-branch.html"/>
   <updated>2009-07-08T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/07/08/crimson-framework-php-5-3-branch</id>
   <content type="html">I have added a PHP 5.3 branch to the Crimson framework.  The code now uses namespaces and has a native namespace autoloader.  Some of the classes were renamed to conform with the PHP Framework Standards Group preliminary standard.

For the time being I will be keeping a 5.2 and 5.3 version of the Crimson framework until PHP 5.3 becomes even more stable.
</content>
 </entry>
 
 <entry>
   <title>Static Method Abuse</title>
   <link href="http://hermanradtke.com/2009/06/22/a-static-method-abuse.html"/>
   <updated>2009-06-22T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/06/22/a-static-method-abuse</id>
   <content type="html">When I began taking over the web development project at work, I noticed a developer using a lot of static members and methods in his class definitions.  His explanation was that it was an optimization he used to improve performance.  Unfortunately, he had no metrics to back the statement up.  So I set out to do some of my own.

&lt;!--more--&gt;

The developer was using static methods and members in abstract classes.  Here is a very simple example:
&lt;pre lang=&quot;php&quot;&gt;abstract class Model_Abstract
{
    static $db;

    public static function setDb($db)
    {
        self::$db = $db;
    }
}&lt;/pre&gt;
This was complimented by a call in the MVC bootstrap:
&lt;pre lang=&quot;php&quot;&gt;$db = new Db;
Model_Abstract::setDb($db);&lt;/pre&gt;
The developer explained to me that this forces each concrete model class to use the &lt;em&gt;same&lt;/em&gt; database class.  He said his reason for doing this was that PHP's copy-on-write functionality made a copy of the database object each time the internal results of that class changed.

I ran some tests (results below) to see if this was true and it, partially, was.  If any part of a class changes, PHP performs a shallow copy.  That is, if a database class contains a result class, only the result class will be copied and changed if a select query is performed.  The internal reference counter of the database class will simply be incremented.

I also tested whether static members and methods circumvented the shallow copy and they do.  However, this is not without confusion.  The results from the database class must be stored somewhere else before another query is made.  The next query will overwrite the previous results and cause some real confusion if someone forgets to do this.

This whole mess started as a code optimization technique.  It looked to like pre-optimization on code that was never that slow to begin with.  The developer thought that a deep copy of the class was being performed, but never actually bothered to check it out.  The amount of time and resources saved by using the static approach is infinitesimal that it is definitely not worth it.

I have a &lt;a href=&quot;http://github.com/hradtke/Crimson/tree/master&quot;&gt;small framework&lt;/a&gt; that I intentionally &lt;a href=&quot;http://github.com/hradtke/Crimson/blob/ed29837f2430fac1e001921ba9ee238daffade1d/Crimson/Model/Abstract.php&quot;&gt;wrote this into&lt;/a&gt;.  In a future post, I will be using this to outline the steps I used to refactor the code.
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;strong&gt;Non-static test:&lt;/strong&gt;
&lt;pre lang=&quot;php&quot;&gt;class Result
{
    private $_result;

    public function setResult($result)
    {
        $this-&amp;gt;_result = $result;
    }

}

class Db
{
    private $_sql;

    private $_result;

    public function __construct()
    {
        $this-&amp;gt;_result = new Result;
    }

    public function query($sql)
    {
        $this-&amp;gt;_sql = $sql;
        $this-&amp;gt;_result-&amp;gt;setResult(rand());
    }
}

class Model
{
    private $_db;

    public function __construct($db)
    {
        $this-&amp;gt;_db = $db;
    }

    public function test()
    {
        $res = $this-&amp;gt;_db-&amp;gt;query('SELECT bar FROM foo');
        debug_zval_dump($this-&amp;gt;_db);
    }
}

$db = new Db;

debug_zval_dump($db);

$model = array();

$before = memory_get_usage();
for($i = 0; $i &amp;lt; 10; $i++) {     $model[$i] = new Model($db);     $model[$i]-&amp;gt;test();
}
$after = memory_get_usage();

echo &quot;Change in memory usage: &quot;, $after - $before;&lt;/pre&gt;
&lt;pre&gt;object(Db)#1 (2) refcount(2){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  NULL refcount(2)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    NULL refcount(2)
  }
}
object(Db)#1 (2) refcount(3){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(1866838064) refcount(1)
  }
}
object(Db)#1 (2) refcount(4){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(282674262) refcount(1)
  }
}
object(Db)#1 (2) refcount(5){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(415846557) refcount(1)
  }
}
object(Db)#1 (2) refcount(6){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(459928359) refcount(1)
  }
}
object(Db)#1 (2) refcount(7){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(46535217) refcount(1)
  }
}
object(Db)#1 (2) refcount(8){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(1038889971) refcount(1)
  }
}
object(Db)#1 (2) refcount(9){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(1206550183) refcount(1)
  }
}
object(Db)#1 (2) refcount(10){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(144575963) refcount(1)
  }
}
object(Db)#1 (2) refcount(11){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(1310083917) refcount(1)
  }
}
object(Db)#1 (2) refcount(12){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(1850865612) refcount(1)
  }
}
Change in memory usage: 4996&lt;/pre&gt;
&lt;strong&gt;Static test:&lt;/strong&gt;
&lt;pre lang=&quot;php&quot;&gt;class Result
{
    private $_result;

    public function setResult($result)
    {
        $this-&amp;gt;_result = $result;
    }

}

class Db
{
    private $_sql;

    private $_result;

    public function __construct()
    {
        $this-&amp;gt;_result = new Result;
    }

    public function query($sql)
    {
        $this-&amp;gt;_sql = $sql;
        $this-&amp;gt;_result-&amp;gt;setResult(rand());
    }
}

class Model
{
    private static $_db;

    static public function setDb($db)
    {
        self::$_db = $db;
    }

    public function test()
    {
        $res = self::$_db-&amp;gt;query('SELECT bar FROM foo');
        debug_zval_dump(self::$_db);
    }
}

$db = new Db;

debug_zval_dump($db);

Model::setDb($db);

debug_zval_dump($db);

$model = array();

$before = memory_get_usage();
for($i = 0; $i &amp;lt; 10; $i++) {     $model[$i] = new Model();     $model[$i]-&amp;gt;test();
}
$after = memory_get_usage();

echo &quot;Change in memory usage: &quot;, $after - $before;&lt;/pre&gt;
&lt;pre&gt;object(Db)#1 (2) refcount(2){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  NULL refcount(2)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    NULL refcount(2)
  }
}
object(Db)#1 (2) refcount(3){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  NULL refcount(2)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    NULL refcount(2)
  }
}
object(Db)#1 (2) refcount(3){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(1722572263) refcount(1)
  }
}
object(Db)#1 (2) refcount(3){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(2057122892) refcount(1)
  }
}
object(Db)#1 (2) refcount(3){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(332001950) refcount(1)
  }
}
object(Db)#1 (2) refcount(3){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(508834141) refcount(1)
  }
}
object(Db)#1 (2) refcount(3){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(519443361) refcount(1)
  }
}
object(Db)#1 (2) refcount(3){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(1746125577) refcount(1)
  }
}
object(Db)#1 (2) refcount(3){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(690789379) refcount(1)
  }
}
object(Db)#1 (2) refcount(3){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(462332752) refcount(1)
  }
}
object(Db)#1 (2) refcount(3){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(801369044) refcount(1)
  }
}
object(Db)#1 (2) refcount(3){
  [&quot;_sql&quot;:&quot;Db&quot;:private]=&amp;gt;
  string(19) &quot;SELECT bar FROM foo&quot; refcount(1)
  [&quot;_result&quot;:&quot;Db&quot;:private]=&amp;gt;
  object(Result)#2 (1) refcount(1){
    [&quot;_result&quot;:&quot;Result&quot;:private]=&amp;gt;
    long(557914563) refcount(1)
  }
}
Change in memory usage: 4136&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>More Reliable Authentication in Zend Framework</title>
   <link href="http://hermanradtke.com/2009/06/17/more-reliable-authentication-in-zend-framework.html"/>
   <updated>2009-06-17T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/06/17/more-reliable-authentication-in-zend-framework</id>
   <content type="html">Stefan Esser gave a presentation on &lt;a href=&quot;http://www.suspekt.org/2009/06/16/dutch-php-conference-the-slides/&quot;&gt;Secure Programming with the Zend Framework at the 2009 Dutch PHP Conference&lt;/a&gt;.  While the presentation was good, one thing that bothered me was the way authentication was being handled.

&lt;!--more--&gt;

&lt;strong&gt;Note that this a very minimal example of how I handle authentication.  Please make sure to completely implement, document and test before putting this on a production server.&lt;/strong&gt;

Stefan's suggested implementation is to extend the Zend_Controller_Action class to create a custom controller class and use the init() method to determine if the user is logged in.  Developers are expected to then extend this new class to create specific controllers.  The obvious problem with this approach, as Stefan mentions, is that anyone who overloads the init() method must make sure to call the parent's init() method.  If security relies on an individual developer remembering to call the correct methods, then the system is not very secure.  Stefan makes a comment similar to this in the XSS section of his presentation.

I think the better solution to handle the authentication is to create a controller plugin.  The authentication controller plugin is registered in one spot, the bootstrap, thus making it much more reliable.  There really isn't much more work to do to use a plugin either.

Start by extending the Zend_Controller_Plugin_Abstract class.
&lt;pre lang=&quot;php&quot;&gt;class My_Authentication extends Zend_Controller_Plugin_Abstract
{
    public function preDispatch(Zend_Controller_Request_Abstract $request)
    {
        $auth = Zend_Auth::getInstance();
        if ($auth-&gt;hasIdentity()) {
            return;
        }

        self::setDispatched(false);
        // handle unauthorized request...
    }
}&lt;/pre&gt;
In the bootstrap, make sure to register the plugin before calling the front controller's dispatch() method.
&lt;pre lang=&quot;php&quot;&gt;$controller = Zend_Controller_Front::getInstance();
$controller-&gt;registerPlugin(new My_Authentication());
$controller-&gt;dispatch();&lt;/pre&gt;
The above method works fine if your login page is outside your MVC routing.  If you use a login controller, there is some more work to do.  A white-list of controllers and actions must be maintained to signal the authentication adapter that authentication is not required.  I keep the white-list as a hard-coded array inside the authentication plugin class itself.  Our class then becomes:
&lt;pre lang=&quot;php&quot;&gt;class My_Authentication extends Zend_Controller_Plugin_Abstract
{

    private $_whitelist;

    public function __construct()
    {
        $this-&gt;_whitelist = array(
            'index/login'
        );
    }

    public function preDispatch(Zend_Controller_Request_Abstract $request)
    {
        $controller = strtolower($request-&gt;getControllerName());
        $action = strtolower($request-&gt;getActionName());
        $route = $controller . '/' . $action;

        if (in_array($route, $this-&gt;_whitelist)) {
            return;
        }

        $auth = Zend_Auth::getInstance();
        if ($auth-&gt;hasIdentity()) {
            return;
        }

        self::setDispatched(false);
        // handle unauthorized request...
    }
}&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Exploring Facebook's Thrift</title>
   <link href="http://hermanradtke.com/2009/04/20/exploring-facebooks-thrift.html"/>
   <updated>2009-04-20T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/04/20/exploring-facebooks-thrift</id>
   <content type="html">At work we have a number of services written in C.  These services use the same core libraries our legacy C application uses.  Keeping all this business logic in a central place makes life much easier, but the way services are written is horribly inefficient.  I am on a mission to find a better way.

&lt;!--more--&gt;

All our services communicate using XML with the same basic structure.  Without going into too much detail, there is a single complex tag which contains data specific to that request.  The problem with the way we do services is that each service is responsible for parsing a unique set of XML.  We have over 50,000 lines of service code dedicated to parsing XML.  Maintenance is problematic and making changes to services is often hindered by changes to the client(s), the XML and the service parsing code.  Thankfully many of our existing services are becoming obsolete.  However, we are at a pivotal point where there is a need for a new set of services.  A perfect time to make some changes.

At work there are a number of finance calculations written in C for the legacy application.  As we migrate more and more of the application onto the web, one of the biggest questions is what to do with these calculations.  The current service framework we use has proven too difficult to maintain and re-writing all the calculations in php is an inefficient use of our time and may be too slow.

I had come across Thrift some time ago, but rejected it as it was still pretty new.  Now that it resides in Apache's incubator, I felt it was worth checking out as an alternative to the existing way we do services.  One of the first things I noticed was that Thrift's PHP tutorial seemed to be incomplete.  So I decided to create a small example program to demo Thrift to my co-workers.

Thrift's code generation speaks for itself.  But, how fast is it?  I decided to run a quick comparison between raw php and thrift.  I implemented a basic APR calculation in php 

&lt;pre lang=&quot;php&quot; line=&quot;1&quot;&gt;
&lt;?php

function calc_apr($loanamount, $payment, $term)
{
    $apr = 0;
    $apr_next = .1;
    $tolerance = .00000005;

    //Newton-Raphson method
    while (($apr_next &gt; $apr + $tolerance) or ($apr_next &lt; $apr)) {
        $apr = $apr_next;
        $apr_next = $payment / $loanamount * (pow(1 + $apr, $term) - 1)
            / (pow(1 + $apr, $term));
    }

    return $apr * 1200;
}
&lt;/pre&gt;

For a good general case, I used the &lt;a href=&quot;http://www.fdic.gov/regulations/laws/rules/6500-1950.html#6500appendixjtopart226&quot;&gt;FDIC's&lt;/a&gt; example numbers.  The php code performed pretty well.

&lt;pre lang=&quot;php&quot; line=&quot;19&quot;&gt;
echo calc_apr(1000, 33.61, 36), &quot;n&quot;;
&lt;/pre&gt;
&lt;strong&gt;Result:&lt;/strong&gt;
&lt;code&gt;real    0m0.017s
user    0m0.012s
sys     0m0.005s&lt;/code&gt;

However, I wanted something that took more processing power to compute.  So I plugged in some numbers to simulate a worst case scenario.  As you can see, the amount of iterations required to calculate this result was costly.
&lt;pre lang=&quot;php&quot; line=&quot;19&quot;&gt;
echo calc_apr(1000, 500.1, 2 ), &quot;n&quot;;
&lt;/pre&gt;
&lt;strong&gt;Result:&lt;/strong&gt;
&lt;code&gt;real    0m0.442s
user    0m0.439s
sys     0m0.003s&lt;/code&gt;


Now it is time to build a thrift service.  There is no C support for thrift, so I chose C++ for the server and php for the client.  I created a simple thrift file that defines a simple deal object and a Sale service with a lonely calc_apr method.

&lt;pre lang=&quot;cpp&quot; line=&quot;1&quot;&gt;
namespace cpp Sale
namespace php Sale

struct deal {
  1: i32 dealno
  2: double payment
  3: i32 term
  4: double amtfin
}

service Sale {
   double calc_apr(1:deal d)
}

&lt;/pre&gt;

After using the thrift utility to build my C++ and php files, I had to fill in the C++ skeleton with some actual logic.  The function below is pretty much identical to the php one I created above.  The only difference is the use of a deal struct to pass the values in as a single object.

&lt;pre lang=&quot;cpp&quot; line=&quot;1&quot;&gt;
class SaleHandler : virtual public SaleIf {
    public:
        SaleHandler() {
        }

        double calc_apr(const deal&amp; d) {
            double apr = 0;
            double apr_next = .1;
            double range = .00000005;

            while((apr_next &gt; apr + range) || (apr_next &lt; apr)) {
                apr = apr_next;
                apr_next = d.payment / d.amtfin * (pow(1 + apr, d.term) - 1) /
                    (pow(1 + apr, d.term));
            }

            return apr * 1200;
        }
};
&lt;/pre&gt;

The php client is so basic I won't even show it.  In the middle of the client skeleton's try block, I created a new Sale_deal() object, assigned the same values used to test the php code and called the calc_apr() function.

I first plugged in the numbers from the general case.  As expected, there is some overhead to all the generated code, but not as much as I thought there would be.

&lt;strong&gt;Result:&lt;/strong&gt;
&lt;code&gt;real    0m0.037s
user    0m0.030s
sys     0m0.007s&lt;/code&gt;

The big difference is in the worst case.  The performance benefits of a compiled language really start to shine here.

&lt;strong&gt;Result:&lt;/strong&gt;
&lt;code&gt;real    0m0.057s
user    0m0.027s
sys     0m0.011s&lt;/code&gt;

The worst case scenario may seem unfair, but it represents what is really going on with our finance calculations at work.  The complexity is much higher and there are even iterations within iterations to figure out some of the more obscure numbers.  With this comparison, Thrift appears to be a viable alternative to our current approach to services.
</content>
 </entry>
 
 <entry>
   <title>Frustration with vim.org</title>
   <link href="http://hermanradtke.com/2009/04/13/frustration-with-vimorg.html"/>
   <updated>2009-04-13T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/04/13/frustration-with-vimorg</id>
   <content type="html">I started using the phpDocumentor for Vim (PDV) script written by Tobias Schlitt.  Very quickly I found a bug with one of the regular expressions used to parse apart the class definition.  Tobias does not seem to be maintaing this plugin anymore, so I decided I would fix the bug and submit a new version to vim.org.  I packaged up the new version of the script and went to update the PDV page on vim.org only to find out I can't.  There isn't even a mechanism for me to post a comment.

&lt;!--more--&gt;

I was frustrated to say the least, but knew I could not have been the first one.  I found an &lt;a title=&quot; Improvements for vim.org/scripts&quot; href=&quot;http://www.mail-archive.com/vim_use@googlegroups.com/msg00456.html&quot; target=&quot;_blank&quot;&gt;archived email&lt;/a&gt; sent by Thomas Koch to the VIM mailing list describing some of the problems with the management of scripts and the improvements he would like to see made.  Thomas also created a &lt;a title=&quot;vim.org relaunch&quot; href=&quot;http://vim.wikia.com/wiki/Vim.org_relaunch&quot; target=&quot;_blank&quot;&gt;wiki page&lt;/a&gt; to organize his proposed relauch.

The great thing is that the website is built using PHP and MySQL.  That means I can lend a hand to make these changes happen.  I really don't want to see this project die off, so I have emailed the vim@vim.org mailing list prompting for more action.
</content>
 </entry>
 
 <entry>
   <title>Choosing VIM</title>
   <link href="http://hermanradtke.com/2009/04/11/choosing-vim.html"/>
   <updated>2009-04-11T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/04/11/choosing-vim</id>
   <content type="html">At work we were using VIM for all editing, except PHP.  Back when the decision was made to use PHP for all web development, consultants told us we needed an IDE that offered all kinds of tools that VIM lacks.  So we shopped around for IDE's and eventually bought Zend Studio licenses for everyone.  Today those licesnses are collecting dust.  Even with the feature rich toolset of Zend Studio, and other IDE's, none seem to satisfy our need like VIM does.

&lt;!--more--&gt;

I decided a few weeks ago that I would try to find the tools we liked in Zend Studio that were missing from VIM.  I know we didn't need things like version control integration or project management plugins.  The Linux command line is more than capable of handling these sorts of tasks.  And since most of us at work are Bash enthusiasts, doing it on the command line is often much faster.  What we needed were things like DocBlock generation and tag browsing.

I got started by referencing Thomas Kock's post on using &lt;a title=&quot;VIM as a PHP IDE&quot; href=&quot;http://www.koch.ro/blog/index.php?/archives/63-VIM-an-a-PHP-IDE.html&quot; target=&quot;_blank&quot;&gt;VIM as a PHP IDE&lt;/a&gt;.  We already use cscope, so all the plugins he listed were pretty easy to introduce into our workflow.  The CodeSniffer integration is really sexy.  I did run into a problem with phpDocumentor for Vim.  It seems that Tobias Schlitt is no longer supporting that plugin.  Due to the ineffeciencies of vim.org, I moved the code over to &lt;a href=&quot;http://github.com/hradtke/pdv/tree/master&quot;&gt;github&lt;/a&gt;.

I don't think VIM is the right PHP editor for everyone, but it has been working fairly well for us.
</content>
 </entry>
 
 <entry>
   <title>Crutching on MySQL's INSERT IGNORE</title>
   <link href="http://hermanradtke.com/2009/03/05/crutching-on-mysqls-insert-ignore.html"/>
   <updated>2009-03-05T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/03/05/crutching-on-mysqls-insert-ignore</id>
   <content type="html">MySQL has a lot of nice additions to the SQL-92 standard that make life easier for developers.  The drawback to these shortcuts is that many developers don't learn how to cope in other database environments, like PostgreSQL.  Take INSERT IGNORE for example:  PostgreSQL does not have support for this syntax.  A resourceful developer can do a quick google search to learn an alternative, but many of the solutions at the top of google will show the wrong way to solve this problem.

&lt;!--more--&gt;

Common bad example 1: Use a SELECT statement to check if the key exists and INSERT only if the key is not found.  
The main problem with this solution is the glaring race condition.  In the time in between the SELECT and INSERT, another session can insert the record.  You also have to write extra code into your application to process the SELECT query, which may have to specific for many cases.  A big waste of time.

Common bad example 2: Delete the row containing the key to be inserted and then INSERT the data again.  
Hopefully this is done in a transaction, but it still is dicey.  While this solution requires no extra application code to be written, it will only work for very basic cases.  Timestamps, flags and other meta data will be lost with a blind delete.  This solution scares me the most.

Both examples 1 and 2 can also be made into stored procedures.  Don't be tricked into thinking this is a better solution.

&lt;strong&gt;The best solution&lt;/strong&gt; is to insert the data and, if there is an error, check the error code.  This is basically what the MySQL INSERT IGNORE syntax does!  PostgreSQL, and most major relational databases, follow the ANSI SQL-92 standard.  The SQL-92 standard contains a clear list of error codes that an application can check against.  If there is a duplicate key error, the application can handle it accordingly.  This does not require an extra query, has no race condition and is easy to check for in the application.

For those wondering, 23505 is the error code for duplicate key errors.

A list of all the SQL error codes can be found here:
&lt;a href=&quot;http://db.apache.org/derby/docs/10.3/ref/rrefexcept71493.html&quot;&gt;http://db.apache.org/derby/docs/10.3/ref/rrefexcept71493.html&lt;/a&gt;

Edit: Maggie Nelson talks about her experience with this very same issue from an Oracle users point of view in &lt;a href=&quot;http://maggienelson.com/2009/03/the-rules-of-software-engagement/&quot;&gt;The Rules of (Software) Engagement&lt;/a&gt;.
</content>
 </entry>
 
 <entry>
   <title>PHP extension debugging hack</title>
   <link href="http://hermanradtke.com/2009/02/28/hello-world.html"/>
   <updated>2009-02-28T00:00:00+00:00</updated>
   <id>http://hermanradtke.com/2009/02/28/hello-world</id>
   <content type="html">At work I maintain a handful of custom PHP extensions.  When someone reports a problem with one of the extensions, I want to fire up gdb right away and see exactly what is going on.  In order to do this, I build a custom php binary with debugging enabled.  I leave this binary inside my home directory so as not to affect my installed production php binary.  I should now be able to rebuild my custom extensions now with debugging enabled and start debugging.  But wait, the configure script rejects the flag.

&lt;!--more--&gt;

The problem is that my custom extensions are deployed as shared objects and use phpize to build outside of the php source directory.  The makefiles generated by phpize compile against my installed production php header files.  The configure script generated by phpize checks against these header files to see if debugging is turned on.  If it is not, then it does not let me compile my extension with debugging flags.

The quick and dirty solution I found to this problem is to modify the php_config.h file commonly found in the /usr/local/include/php/main directory.  Change the ZEND_DEBUG flag from 0 to 1.  There are two defines, make sure to modify both of them.  Switch it back to 0 when done with the debug session.

Happy hacking...
</content>
 </entry>
 
 
</feed>
